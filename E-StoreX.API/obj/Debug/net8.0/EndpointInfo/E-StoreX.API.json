{
  "openapi": "3.0.1",
  "info": {
    "title": "E-StoreX.API",
    "version": "1.0"
  },
  "paths": {
    "/api/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Registers a new user in the system.",
        "requestBody": {
          "description": "An object containing user registration details like username, email, and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Authenticates an existing user and generates a JWT token.",
        "requestBody": {
          "description": "The user's login credentials (email and password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/confirm-email": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Confirms a user's email using the provided user ID and token.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Token",
            "in": "query",
            "required": true,
            "schema": {
              "minLength": 10,
              "type": "string"
            }
          },
          {
            "name": "RedirectTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/forgot-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Sends a password reset link to the user's email address.",
        "requestBody": {
          "description": "Contains the email address of the user who requested a password reset.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/reset-password/verify": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Verifies the validity of a reset password token for a given user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/reset-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the user's password using a valid token.",
        "requestBody": {
          "description": "Contains user ID, token, and new password details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/generate-new-jwt-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Generates a new access token (and refresh token) using a valid refresh token.",
        "requestBody": {
          "description": "The current (expired) access token and refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TokenModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/update-address": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Updates the authenticated user's address.",
        "description": "The method retrieves the user's email from the JWT claims and uses it to update the address.\r\nThe user must be authenticated for this operation.",
        "requestBody": {
          "description": "The new EStoreX.Core.DTO.ShippingAddressDTO object containing the updated address details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/get-address": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves the shipping address of the currently authenticated user.",
        "description": "Requires the user to be authenticated. The user's email is extracted from the JWT claims,\r\nand used to fetch the associated shipping address from the authentication service.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Baskets/{id}": {
      "get": {
        "tags": [
          "Baskets"
        ],
        "summary": "Retrieves a customer basket by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Baskets"
        ],
        "summary": "Deletes a customer basket by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The customer ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Baskets": {
      "post": {
        "tags": [
          "Baskets"
        ],
        "summary": "Adds or updates a customer basket.",
        "requestBody": {
          "description": "The basket to add or update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBasket"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBasket"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerBasket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Bug/error": {
      "get": {
        "tags": [
          "Bug"
        ],
        "summary": "Returns a 500 Internal Server Error response.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Bug/not-found": {
      "get": {
        "tags": [
          "Bug"
        ],
        "summary": "Returns a 404 Not Found response.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Bug/bad-request/{Id}": {
      "get": {
        "tags": [
          "Bug"
        ],
        "summary": "Returns a 400 Bad Request response.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Bug/bad-request": {
      "get": {
        "tags": [
          "Bug"
        ],
        "summary": "Returns a 400 Bad Request response.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieves all categories from the database.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a new category in the database.",
        "requestBody": {
          "description": "categoryDTO object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Categories/{Id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieve category with specific Id",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Category Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates an existing category in the database.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "category Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the new value for category object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a category with the specified Id from the database.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Category Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/errors/{statusCode}": {
      "get": {
        "tags": [
          "Error"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Creates a new order for the authenticated user.",
        "requestBody": {
          "description": "The order data to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created order."
          },
          "400": {
            "description": "If the user email is not present in the JWT token."
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieves all orders associated with the currently authenticated user.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Orders/{Id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieves a specific order by its ID for the currently authenticated user.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Orders/delivery-methods": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieves all available delivery methods.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves all products from the database.",
        "parameters": [
          {
            "name": "SearchBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MinPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "MaxPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "CategoryId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortOrderOptions"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create new product in database",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 1000,
              "minLength": 5,
              "type": "string"
            }
          },
          {
            "name": "NewPrice",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "OldPrice",
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "CategoryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Photos": {
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "Photos": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Products/{Id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves a product by its ID.",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Product Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Products/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates an existing product in the database.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "CategoryId",
                  "Description",
                  "Id",
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Name": {
                    "maxLength": 100,
                    "type": "string"
                  },
                  "Description": {
                    "maxLength": 1000,
                    "minLength": 5,
                    "type": "string"
                  },
                  "NewPrice": {
                    "minimum": 0,
                    "type": "number",
                    "format": "double"
                  },
                  "OldPrice": {
                    "minimum": 0,
                    "type": "number",
                    "format": "double"
                  },
                  "CategoryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Photos": {
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "NewPrice": {
                  "style": "form"
                },
                "OldPrice": {
                  "style": "form"
                },
                "CategoryId": {
                  "style": "form"
                },
                "Photos": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "delete product from database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "product Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BasketItem": {
        "required": [
          "category",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "qunatity": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "minimum": 0.01,
            "type": "number",
            "format": "double"
          },
          "category": {
            "minLength": 1,
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerBasket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "basketItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasketItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordDTO": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "LoginDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 6,
            "type": "string",
            "format": "password"
          },
          "rememberMe": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrderAddRequest": {
        "required": [
          "basketId",
          "deliveryMethodId",
          "shippingAddress"
        ],
        "type": "object",
        "properties": {
          "deliveryMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "basketId": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/ShippingAddressDTO"
          }
        },
        "additionalProperties": false
      },
      "PhotoResponse": {
        "type": "object",
        "properties": {
          "imageName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "newPrice": {
            "type": "number",
            "format": "double"
          },
          "oldPrice": {
            "type": "number",
            "format": "double"
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhotoResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterDTO": {
        "required": [
          "confirmPassword",
          "email",
          "password",
          "phone",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "phone": {
            "minLength": 1,
            "pattern": "^[0-9]*$",
            "type": "string"
          },
          "password": {
            "minLength": 6,
            "type": "string",
            "format": "password"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordDTO": {
        "required": [
          "confirmPassword",
          "newPassword",
          "token",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "minLength": 1,
            "type": "string"
          },
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "minLength": 1,
            "type": "string",
            "format": "password"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "ShippingAddressDTO": {
        "required": [
          "city",
          "firstName",
          "lastName",
          "state",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "zipCode": {
            "minLength": 1,
            "pattern": "^\\d{4,10}$",
            "type": "string"
          },
          "street": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "state": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SortOrderOptions": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "TokenModel": {
        "required": [
          "refreshToken",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string"
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateCategoryDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Controller responsible for handling user authentication-related actions\r\nsuch as registration, login, email confirmation, and password reset for the E-StoreX API."
    },
    {
      "name": "Baskets",
      "description": "API controller for managing customer baskets."
    },
    {
      "name": "Bug",
      "description": "Controller for handling bug-related operations."
    },
    {
      "name": "Categories",
      "description": "Controller for managing product categories in the E-StoreX application."
    },
    {
      "name": "Error",
      "description": ""
    },
    {
      "name": "Orders",
      "description": "Controller responsible for handling order-related operations.\r\nRequires the user to be authenticated."
    },
    {
      "name": "Products",
      "description": "Controller for managing products in the E-StoreX application."
    }
  ]
}