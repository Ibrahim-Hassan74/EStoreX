<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E-StoreX.API</name>
    </assembly>
    <members>
        <member name="T:E_StoreX.API.Controllers.AccountController">
            <summary>
            Controller responsible for handling user authentication-related actions
            such as registration, login, email confirmation, and password reset for the E-StoreX API.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.#ctor(ServiceContracts.IAuthenticationService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.AccountController"/> class.
            </summary>
            <param name="authService">
            The authentication service that handles user registration, login, 
            email confirmation, and password reset logic.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.PostRegister(EStoreX.Core.DTO.RegisterDTO)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="registerDTO">
            An object containing user registration details like username, email, and password.
            </param>
            <returns>
            Returns <c>200 OK</c> if registration is successful, or <c>400/409</c> with details if it fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.PostLogin(EStoreX.Core.DTO.LoginDTO)">
            <summary>
            Authenticates an existing user and generates a JWT token.
            </summary>
            <param name="loginDTO">
            The user's login credentials (email and password).
            </param>
            <returns>
            Returns a JWT token with <c>200 OK</c> on success or <c>401/404</c> with error details if authentication fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ConfirmEmail(EStoreX.Core.DTO.ConfirmEmailDTO)">
            <summary>
            Confirms a user's email using the provided user ID and token.
            </summary>
            <param name="dto">
            Contains the user ID, email confirmation token, and an optional redirect URL.
            </param>
            <returns>
            Returns <c>200 OK</c> if the email confirmation is successful, or 
            <c>400/404</c> if the token is invalid or user is not found.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ForgotPassword(EStoreX.Core.DTO.ForgotPasswordDTO)">
            <summary>
            Sends a password reset link to the user's email address.
            </summary>
            <param name="dto">
            Contains the email address of the user who requested a password reset.
            </param>
            <returns>
            Returns <c>200 OK</c> if the reset link was sent successfully, or <c>400/429</c> with error details.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.VerifyResetPassword(EStoreX.Core.DTO.VerifyResetPasswordDTO)">
            <summary>
            Verifies the validity of a reset password token for a given user.
            </summary>
            <param name="dto">
            Contains the User ID and reset token to validate.
            </param>
            <returns>
            Returns <c>200 OK</c> if the token is valid or <c>400/404</c> if invalid/expired.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ResetPassword(EStoreX.Core.DTO.ResetPasswordDTO)">
            <summary>
            Resets the user's password using a valid token.
            </summary>
            <param name="dto">Contains user ID, token, and new password details.</param>
            <returns>Returns a success or failure response based on token validity and password rules.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.RefreshToken(EStoreX.Core.DTO.TokenModel)">
            <summary>
            Generates a new access token (and refresh token) using a valid refresh token.
            </summary>
            <param name="model">The current (expired) access token and refresh token.</param>
            <returns>Returns a new JWT token pair on success or an error response on failure.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.BasketsController">
            <summary>
            API controller for managing customer baskets.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.#ctor(EStoreX.Core.ServiceContracts.IBasketService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.BasketsController"/> class.
            </summary>
            <param name="basketService">basket service</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.GetBasket(System.String)">
            <summary>
            Retrieves a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>The customer basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.AddOrUpdateBasket(EStoreX.Core.Domain.Entities.CustomerBasket)">
            <summary>
            Adds or updates a customer basket.
            </summary>
            <param name="basket">The basket to add or update.</param>
            <returns>The updated basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.DeleteBasket(System.String)">
            <summary>
            Deletes a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>Status of the deletion.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.BugController">
            <summary>
            Controller for handling bug-related operations.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetError">
            <summary>
            Returns a 500 Internal Server Error response.
            </summary>
            <returns>A 500 status code with a message indicating an internal server error.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetNotFound">
            <summary>
            Returns a 404 Not Found response.
            </summary>
            <returns>A 404 status code with a message indicating the resource was not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetBadRequest(System.Guid)">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetBadRequest">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.CategoriesController">
            <summary>
            Controller for managing product categories in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.ICategoriesService)">
            <summary>
            Constructor for CategoriesController.
            </summary>
            <param name="categoriesService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.GetCategories">
            <summary>
            Retrieves all categories from the database.
            </summary>
            <returns>return </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.GetCategoryById(System.Guid)">
            <summary>
            Retrieve category with specific Id 
            </summary>
            <param name="Id">Category Id</param>
            <returns>Category with Id or BadRequest</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.CreateCategory(EStoreX.Core.DTO.CategoryRequest)">
            <summary>
            Creates a new category in the database.
            </summary>
            <param name="categoryDTO">categoryDTO object</param>
            <returns>Category created</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.UpdateCategory(System.Guid,EStoreX.Core.DTO.UpdateCategoryDTO)">
            <summary>
            Updates an existing category in the database.
            </summary>
            <param name="Id">category Id</param>
            <param name="categoryDTO">the new value for category object</param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category with the specified Id from the database.
            </summary>
            <param name="Id">Category Id</param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.CustomControllerBase">
            <summary>
            Base controller for the E-StoreX API, providing common functionality for all controllers.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.CustomControllerBase.#ctor">
            <summary>
            Constructor for CustomControllerBase, initializing the unit of work.
            </summary>
            <param name="unitOfWork"></param>
        </member>
        <member name="T:E_StoreX.API.Controllers.ErrorController">
            <summary>
            
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.ProductsController">
            <summary>
            Controller for managing products in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.#ctor(EStoreX.Core.ServiceContracts.IProductsService)">
            <summary>
            Constructor for ProductsController.
            </summary>
            <param name="productsService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.GetAllProducts(EStoreX.Core.DTO.ProductQueryDTO)">
            <summary>
            Retrieves all products from the database.
            </summary>
            <returns>products</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.GetProductById(System.Guid)">
            <summary>
            Retrieves a product by its ID.
            </summary>
            <param name="Id">Product Id</param>
            <returns>Product or NotFound</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.CreateProduct(EStoreX.Core.DTO.ProductAddRequest)">
            <summary>
            Create new product in database
            </summary>
            <param name="productRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.UpdateProduct(System.Guid,EStoreX.Core.DTO.ProductUpdateRequest)">
            <summary>
            Updates an existing product in the database.
            </summary>
            <param name="id"></param>
            <param name="productUpdateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.DeleteProduct(System.Guid)">
            <summary>
            delete product from database
            </summary>
            <param name="id">product Id</param>
            <returns>ok / NotFound</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions">
            <summary>
            Exception Handling Middleware Extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions.UseExceptionHandlingMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:EStoreX.API.Filters.AccountValidationFilter">
            <summary>
            A custom action filter that handles model validation errors for account-related actions.
            Returns a uniform error response if the ModelState is invalid.
            </summary>
        </member>
        <member name="M:EStoreX.API.Filters.AccountValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Executes the action filter asynchronously.
            If the model state is invalid, it short-circuits the pipeline and returns a standardized error response.
            Otherwise, it allows the request to proceed to the action method.
            </summary>
            <param name="context">The context for the current action execution.</param>
            <param name="next">The delegate to execute the next action filter or action method.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
    </members>
</doc>
