<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E-StoreX.API</name>
    </assembly>
    <members>
        <member name="T:E_StoreX.API.Controllers.Admin.AdminControllerBase">
            <summary>
            Abstract base controller for admin-related operations.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.ApiClientsController">
            <summary>
            Provides administrative operations for managing API clients in the E-StoreX platform.
            </summary>
            <remarks>
            This controller is restricted to <b>Admin users</b> only and supports API version 2.0.  
            It is responsible for managing API client configurations, authentication keys, and permissions.  
            <para>
            Inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/>.  
            </para>
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.#ctor(EStoreX.Core.ServiceContracts.Account.IApiClientService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.ApiClientsController"/> class with the specified API client
            service.
            </summary>
            <remarks>— This constructor is typically used by dependency injection to provide the required
            service for API client management.</remarks>
            <param name="clientService">The service used to manage API client data and operations. Cannot be <c>null</c>.</param>
            <param name="exportService">Service to manage files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RegisterClient(EStoreX.Core.DTO.Account.Requests.RegisterApiClientRequest)">
            <summary>
            Registers a new API client and returns its API key.
            </summary>
            <param name="request">The request object containing client registration details.</param>
            <returns>
            Returns <see cref="T:EStoreX.Core.DTO.Account.Responses.RegisterApiClientResponse"/> if the client was created successfully.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the request is invalid.  
            </returns>
            <response code="200">Client registered successfully.</response>
            <response code="400">Invalid client data provided.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetClientByKey(System.String)">
            <summary>
            Retrieves client details by its API key.
            </summary>
            <param name="apiKey">The API key used to identify the client.</param>
            <returns>
            Returns <see cref="T:Domain.Entities.Common.ApiClient"/> if the API key is valid.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if no client exists for the given key.  
            </returns>
            <response code="200">Client found successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetAllClients">
            <summary>
            Retrieves all registered API clients.
            </summary>
            <returns>Returns a list of <see cref="T:Domain.Entities.Common.ApiClient"/> entities.</returns>
            <response code="200">Clients retrieved successfully.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.ActiveClient(System.Guid)">
            <summary>
            Activates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client to activate.</param>
            <returns>
            Returns success message if activation succeeded.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if client is not found.  
            </returns>
            <response code="200">Client activated successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.DeActivateClient(System.Guid)">
            <summary>
            Deactivates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client to deactivate.</param>
            <returns>Returns success message if deactivation succeeded; otherwise 404.</returns>
            <response code="200">Client deactivated successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetClient(System.Guid)">
            <summary>
            Retrieves a specific API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client.</param>
            <returns>Returns <see cref="T:Domain.Entities.Common.ApiClient"/> if found; otherwise 404.</returns>
            <response code="200">Client retrieved successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RemoveClient(System.Guid)">
            <summary>
            Removes an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the client to remove.</param>
            <returns>Returns success message if removal succeeded; otherwise 404.</returns>
            <response code="200">Client removed successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.UpdateClient(System.Guid,EStoreX.Core.DTO.Common.UpdateClientRequest)">
            <summary>
            Updates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the client.</param>
            <param name="request">The updated client data.</param>
            <returns>Returns success message if update succeeded; otherwise 404.</returns>
            <response code="200">Client updated successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RotateApiKey(System.Guid)">
            <summary>
            Rotates the API key of a specific client.
            </summary>
            <param name="clientId">The ID of the client.</param>
            <returns>Returns success message with new API key if rotation succeeded; otherwise 404.</returns>
            <response code="200">API key rotated successfully.</response>
            <response code="404">Client not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all clients into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">clients exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.BrandsController">
            <summary>
            Provides administrative operations for managing product brands in the E-StoreX platform.
            </summary>
            <remarks>
            This controller is restricted to <b>Admin users</b> only and supports API version 2.0.  
            It allows creating, updating, deleting, and retrieving brands, as well as assigning them to categories.  
            <para>
            Inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/>.  
            </para>
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.#ctor(EStoreX.Core.ServiceContracts.Products.IBrandService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of <see cref="T:E_StoreX.API.Controllers.Admin.BrandsController"/>.
            </summary>
            <param name="brandsService">Service to manage brand operations.</param>
            <param name="exportService">Service to manage files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.Create(System.String)">
            <summary>
            Creates a new brand.
            </summary>
            <param name="name">The name of the brand.</param>
            <returns>The created brand.</returns>
            <response code="200">Brand created successfully.</response>
            <response code="400">Brand name is empty or invalid.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.Update(System.Guid,System.String)">
            <summary>
            Updates an existing brand.
            </summary>
            <param name="id">The ID of the brand to update.</param>
            <param name="newName">The new name for the brand.</param>
            <returns>The updated brand.</returns>
            <response code="200">Brand updated successfully.</response>
            <response code="400">New name is empty or invalid.</response>
            <response code="404">Brand not found.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.Delete(System.Guid)">
            <summary>
            Deletes a brand by ID.
            </summary>
            <param name="id">The ID of the brand to delete.</param>
            <response code="204">Brand deleted successfully.</response>
            <response code="404">Brand not found.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all brands into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">brands exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.DeleteBrandImage(System.Guid,System.Guid)">
            <summary>
            Deletes a specific brand image by its ID.
            </summary>
            <param name="brandId">The unique identifier of the brand.</param>
            <param name="photoId">The unique identifier of the photo to delete.</param>
            <returns>
            <c>200 OK</c> if the image was deleted successfully;  
            <c>404 Not Found</c> if the brand or the photo was not found;  
            <c>500 Internal Server Error</c> if an unexpected error occurs.
            </returns>
            <response code="200">Image deleted successfully.</response>
            <response code="404">Brand or image not found.</response>
            <response code="500">Unexpected server error.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.AddBrandImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Adds images to the specified brand.
            </summary>
            <param name="brandId">The unique identifier of the brand.</param>
            <param name="files">The list of image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were added successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the brand does not exist.
            </returns>
            <response code="200">Images added successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Brand not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.BrandsController.UpdateBrandImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Updates all images of the specified brand.
            </summary>
            <remarks>
            This will remove all existing images of the brand and replace them with the newly uploaded ones.
            </remarks>
            <param name="brandId">The unique identifier of the brand.</param>
            <param name="files">The list of new image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were updated successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the brand does not exist.
            </returns>
            <response code="200">Images updated successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Brand not found.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.CategoriesController">
            <summary>
            Provides administrative operations for managing product categories in the E-StoreX platform.
            </summary>
            <remarks>
            This controller is intended for <b>admin users only</b> and includes endpoints
            for creating, updating, deleting, assigning brands, and exporting categories.
            <para>
            Version: 2.0  
            Inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/>.
            </para>
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.Categories.ICategoriesService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.CategoriesController"/> class.
            </summary>
            <param name="categoriesService">Service for managing categories.</param>
            <param name="exportService">Service for exporting categories to files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.CreateCategory(EStoreX.Core.DTO.Categories.Requests.CategoryRequest)">
            <summary>
            Creates a new category in the database.
            </summary>
            <param name="categoryDTO">The request object containing category details.</param>
            <returns>
            Returns <see cref="T:EStoreX.Core.DTO.Categories.Responses.CategoryResponse"/> if the category was created successfully.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the request is invalid.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult"/> 500 if an unexpected error occurs.
            </returns>
            <response code="200">Category created successfully.</response>
            <response code="400">Invalid category data supplied.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.UpdateCategory(System.Guid,EStoreX.Core.DTO.Categories.Requests.UpdateCategoryDTO)">
            <summary>
            Updates an existing category in the database.
            </summary>
            <param name="Id">The unique identifier of the category to update.</param>
            <param name="categoryDTO">The updated category details.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> if the update was successful.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the ID does not match the request body.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if no category is found with the given ID.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult"/> 500 if an unexpected error occurs.
            </returns>
            <response code="204">Category updated successfully.</response>
            <response code="400">Invalid request or ID mismatch.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category with the specified Id from the database.
            </summary>
            <param name="Id">The unique identifier of the category to delete.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> if the category was deleted successfully.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if deletion fails or the ID is invalid.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if no category exists with the given ID.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult"/> 500 if an unexpected error occurs.
            </returns>
            <response code="204">Category deleted successfully.</response>
            <response code="400">Invalid category ID or failed to delete.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.AssignBrandToCategory(System.Guid,System.Guid)">
            <summary>
            Assign a brand to a category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="brandId">The unique identifier of the brand.</param>
            <returns>NoContent if successful, BadRequest otherwise.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.UnassignBrandFromCategory(System.Guid,System.Guid)">
            <summary>
            Unassign a brand from a category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="brandId">The unique identifier of the brand.</param>
            <returns>NoContent if successful, BadRequest otherwise.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all categories into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">categories exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.DeleteCategoryImage(System.Guid,System.Guid)">
            <summary>
            Deletes a specific category image by its ID.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="photoId">The unique identifier of the photo to delete.</param>
            <returns>
            <c>200 OK</c> if the image was deleted successfully;  
            <c>404 Not Found</c> if the category or the photo was not found;  
            <c>500 Internal Server Error</c> if an unexpected error occurs.
            </returns>
            <response code="200">Image deleted successfully.</response>
            <response code="404">Category or image not found.</response>
            <response code="500">Unexpected server error.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.AddCategoryImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Adds images to the specified category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="files">The list of image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were added successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the category does not exist.
            </returns>
            <response code="200">Images added successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Category not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.UpdateCategoryImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Updates all images of the specified category.
            </summary>
            <remarks>
            This will remove all existing images of the category and replace them with the newly uploaded ones.
            </remarks>
            <param name="categoryId">The unique identifier of the category.</param>
            <param name="files">The list of new image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were updated successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the category does not exist.
            </returns>
            <response code="200">Images updated successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Category not found.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.DeliveryMethodController">
            <summary>
            DeliveryMethodController handles admin operations related to delivery methods.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DeliveryMethodController.#ctor(EStoreX.Core.ServiceContracts.Orders.IDeliveryMethodService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.DeliveryMethodController"/> class.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DeliveryMethodController.Create(EStoreX.Core.DTO.Orders.Requests.DeliveryMethodRequest)">
            <summary>
            Creates a new delivery method.
            </summary>
            <param name="request">The delivery method details.</param>
            <returns>The created delivery method.</returns>
            <response code="201">Delivery method created successfully.</response>
            <response code="400">Invalid request data.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DeliveryMethodController.Update(System.Guid,EStoreX.Core.DTO.Orders.Requests.DeliveryMethodRequest)">
            <summary>
            Updates an existing delivery method.
            </summary>
            <param name="id">The unique identifier of the delivery method to update.</param>
            <param name="request">The updated delivery method details.</param>
            <returns>The updated delivery method.</returns>
            <response code="200">Delivery method updated successfully.</response>
            <response code="404">Delivery method not found.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DeliveryMethodController.Delete(System.Guid)">
            <summary>
            Deletes a delivery method by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the delivery method to delete.</param>
            <returns>No content if deletion succeeded.</returns>
            <response code="204">Delivery method deleted successfully.</response>
            <response code="404">Delivery method not found.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DeliveryMethodController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all deliveryMethods into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">deliveryMethods exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.DiscountsController">
            <summary>
            Provides endpoints for managing discounts in the system.
            This controller is intended for administrators only.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.#ctor(EStoreX.Core.ServiceContracts.Discount.IDiscountService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.DiscountsController"/> class.
            </summary>
            <param name="discountService">Service responsible for managing discount operations, including creation, update, deletion, and validation.</param>
            <param name="exportService">Service responsible for exporting discount data in various formats (CSV, Excel, PDF).</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.Create(DiscountRequest)">
            <summary>
            Creates a new discount entry in the system, allowing administrators to define promotional offers 
            such as percentage-based or fixed-amount discounts.  
            </summary>
            <param name="request">
            An object containing the discount details (e.g., code, percentage, validity period, and usage rules).
            </param>
            <returns>
            Returns the details of the newly created discount wrapped in <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> 
            if the operation succeeds, or an <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with validation errors if the request is invalid.
            </returns>
            <response code="200">The discount was created successfully and returned in the response body.</response>
            <response code="400">The provided discount details were invalid or incomplete.</response>
            <remarks>
            Example request:  
            POST /api/discount  
            {
              "code": "SUMMER25",
              "percentage": 25,
              "startDate": "2025-09-01T00:00:00Z",
              "endDate": "2025-09-30T23:59:59Z",
              "maxUsage": 100
            }
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.Update(System.Guid,DiscountRequest)">
            <summary>
            Updates the details of an existing discount in the system.  
            This allows administrators to modify attributes such as the discount code, value, validity period,
            or usage rules without creating a new discount entry.
            </summary>
            <param name="id">The unique identifier of the discount to update.</param>
            <param name="request">
            An object containing the updated discount details (e.g., code, percentage or amount, start and end dates, usage limits).
            </param>
            <returns>
            Returns the updated discount information wrapped in <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> 
            if the operation succeeds, or an <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> indicating that the discount was not found.
            </returns>
            <response code="200">The discount was successfully updated and the updated details are returned.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            PUT /api/discount/{id}  
            {
              "code": "WINTER10",
              "percentage": 10,
              "startDate": "2025-12-01T00:00:00Z",
              "endDate": "2025-12-31T23:59:59Z",
              "maxUsage": 50
            }
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.Delete(System.Guid)">
            <summary>
            Permanently removes an existing discount from the system.  
            This action is typically used by administrators when a discount code is no longer valid 
            or should no longer be available for use.
            </summary>
            <param name="id">The unique identifier of the discount to delete.</param>
            <returns>
            An <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> indicating whether the delete operation succeeded or if the discount was not found.
            </returns>
            <response code="200">The discount was successfully deleted.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            DELETE /api/discount/{id}  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.Activate(System.Guid)">
            <summary>
            Activates an existing discount immediately, making it available for use by customers.  
            This action is typically performed by administrators to enable a discount code without waiting
            for its scheduled start date.
            </summary>
            <param name="id">The unique identifier of the discount to activate.</param>
            <returns>
            An <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> indicating the outcome of the operation (success or not found).
            </returns>
            <response code="200">The discount was successfully activated and is now available for use.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            POST /api/discount/{id}/activate  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.Expire(System.Guid)">
            <summary>
            Expires an existing discount immediately, preventing it from being used in any future orders.  
            This action is typically performed by administrators to disable a discount code before its scheduled end date.
            </summary>
            <param name="id">The unique identifier of the discount to expire.</param>
            <returns>
            An <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> indicating the result of the operation (success or not found).
            </returns>
            <response code="200">The discount was successfully expired and is no longer available for use.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            POST /api/discount/{id}/expire  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.UpdateDates(System.Guid,EStoreX.Core.DTO.Discount.Request.UpdateDiscountDatesRequest)">
            <summary>
            Updates the validity period of an existing discount by modifying its start and end dates.  
            This action is typically used by administrators to extend, shorten, or reschedule a discount campaign.
            </summary>
            <param name="id">The unique identifier of the discount to update.</param>
            <param name="request">
            An object containing the new start and end dates for the discount's validity period.
            </param>
            <returns>
            An <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> indicating the outcome of the operation (success or not found).
            </returns>
            <response code="200">The discount validity dates were successfully updated.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            PUT /api/discount/{id}/update-dates  
            {
              "startDate": "2025-10-01T00:00:00Z",
              "endDate": "2025-12-31T23:59:59Z"
            }
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetById(System.Guid)">
            <summary>
            Retrieves the details of a specific discount by its unique identifier.  
            This allows administrators or authorized users to view information such as the discount code, value, 
            validity period, and usage rules.
            </summary>
            <param name="id">The unique identifier of the discount to retrieve.</param>
            <returns>
            A <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> wrapped in <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> if the discount exists,  
            or an <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with a not found message if it does not.
            </returns>
            <response code="200">The discount was found and its details are returned in the response.</response>
            <response code="404">No discount with the specified <c>id</c> was found.</response>
            <remarks>
            Example request:  
            GET /api/discount/{id}  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetByCode(System.String)">
            <summary>
            Retrieves the details of a discount using its unique code.  
            This allows customers or administrators to check whether a discount code is valid 
            and view its associated details such as value, type, and validity period.
            </summary>
            <param name="code">The unique discount code provided by the customer.</param>
            <returns>
            A <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> wrapped in <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> if the discount exists,  
            or an <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with an error message if the discount code is invalid or not found.
            </returns>
            <response code="200">The discount was found and its details are returned in the response.</response>
            <response code="404">No discount with the specified <c>code</c> was found.</response>
            <remarks>
            Example request:  
            GET /api/discount/by-code/SUMMER25  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetAll">
            <summary>
            Retrieves a list of all discounts available in the system.  
            This includes active, expired, and scheduled discounts, allowing administrators 
            to manage and review the entire discount catalog.
            </summary>
            <returns>
            A collection of <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> objects wrapped in 
            <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/>.
            </returns>
            <response code="200">All discounts were retrieved successfully.</response>
            <remarks>
            Example request:  
            GET /api/discount  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetActive">
            <summary>
            Retrieves a list of all discounts that are currently active and available for use.  
            Active discounts are those within their validity period and not expired or deactivated.
            </summary>
            <returns>
            A collection of <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> objects wrapped in 
            <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> representing the active discounts.
            </returns>
            <response code="200">The list of active discounts was retrieved successfully.</response>
            <remarks>
            Example request:  
            GET /api/discount/active  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetExpired">
            <summary>
            Retrieves a list of all discounts that have expired.  
            Expired discounts are those whose end date has passed or that were manually expired 
            and are no longer valid for use.
            </summary>
            <returns>
            A collection of <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> objects wrapped in 
            <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> representing the expired discounts.
            </returns>
            <response code="200">The list of expired discounts was retrieved successfully.</response>
            <remarks>
            Example request:  
            GET /api/discount/expired  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.GetNotStarted">
            <summary>
            Retrieves a list of all discounts that are scheduled but have not yet started.  
            Upcoming discounts are those whose start date is in the future, making them unavailable 
            until the scheduled activation date.
            </summary>
            <returns>
            A collection of <see cref="T:EStoreX.Core.DTO.Discounts.Responses.DiscountResponse"/> objects wrapped in 
            <see cref="T:EStoreX.Core.DTO.Common.ApiResponseWithData`1"/> representing the upcoming discounts.
            </returns>
            <response code="200">The list of upcoming discounts was retrieved successfully.</response>
            <remarks>
            Example request:  
            GET /api/discount/upcoming  
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.ExportActiveDiscounts(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all currently active discounts in the specified format (CSV, Excel, or PDF).  
            Use this endpoint to download active discounts for reporting or analysis purposes.  
            </summary>
            <param name="type">The type of export format (Csv, Excel, Pdf).</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.ExportUpcomingDiscounts(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all upcoming (not yet started) discounts in the specified format (CSV, Excel, or PDF).  
            Use this endpoint to download upcoming discounts for planning and promotional purposes.  
            </summary>
            <param name="type">The type of export format (Csv, Excel, Pdf).</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.ExportExpiredDiscounts(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all expired discounts in the specified format (CSV, Excel, or PDF).  
            Use this endpoint to review past discounts for auditing or historical analysis.  
            </summary>
            <param name="type">The type of export format (Csv, Excel, Pdf).</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.DiscountsController.ExportAllDiscounts(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all discounts (active, upcoming, and expired) in the specified format (CSV, Excel, or PDF).  
            Restricted to <b>Admin users</b> for reporting or auditing purposes.  
            </summary>
            <param name="type">The type of export format (Csv, Excel, Pdf).</param>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.OrdersController">
            <summary>
            Provides functionality for managing and processing orders within the administrative context.
            </summary>
            <remarks>This controller inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/> and is intended for use in
            administrative scenarios where order-related operations are required. It serves as a base for implementing
            actions related to order management.</remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.#ctor(EStoreX.Core.ServiceContracts.Orders.IOrderService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.OrdersController"/> class with the specified order service.
            </summary>
            <param name="orderService">The service used to manage order-related operations.</param>
            <param name="exportService">Service to manage files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.GetOrders">
            <summary>
            Retrieves all orders from the system.
            </summary>
            <returns>
            Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all orders if found.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.UnauthorizedResult"/> if the user is not authenticated.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if no orders exist.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult"/> 500 if an unexpected error occurs.
            </returns>
            <response code="200">Orders retrieved successfully.</response>
            <response code="401">User is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all orders into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">orders exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.GetSalesReport(System.DateTime,System.DateTime)">
            <summary>
            Retrieves a sales report for a given date range.  
            This allows administrators to analyze revenue, order volume, and top-selling products.
            </summary>
            <param name="startDate">The start date of the reporting period.</param>
            <param name="endDate">The end date of the reporting period.</param>
            <returns>
            Returns <see cref="T:EStoreX.Core.DTO.Orders.Responses.SalesReportResponse"/> containing sales statistics for the period.  
            Returns 404 if no orders were found in the specified range.
            </returns>
            <response code="200">Sales report retrieved successfully.</response>
            <response code="400">Invalid date range provided (e.g., start date after end date).</response>
            <response code="404">No orders found for the specified date range.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.ExportSalesReport(System.DateTime,System.DateTime,EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports the sales report for a given date range in the specified file format.
            </summary>
            <param name="startDate">The start date of the reporting period.</param>
            <param name="endDate">The end date of the reporting period.</param>
            <param name="type">The export file format (CSV, Excel, PDF).</param>
            <returns>A downloadable file containing the sales report.</returns>
            <response code="200">Sales report exported successfully.</response>
            <response code="400">Invalid date range or unsupported export type.</response>
            <response code="404">No sales data available for the specified period.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.ProductsController">
            <summary>
            Provides administrative operations for managing products in the E-StoreX application.
            </summary>
            <remarks>
            This controller is intended for admin scenarios only and includes endpoints 
            for creating, updating, and deleting products.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.#ctor(EStoreX.Core.ServiceContracts.Products.IProductsService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.ProductsController"/> class.
            </summary>
            <param name="productsService">Service for handling product operations.</param>
            <param name="exportService">Service to manage files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.CreateProduct(EStoreX.Core.DTO.Products.Requests.ProductAddRequest)">
            <summary>
            Creates a new product in the database.
            </summary>
            <param name="productRequest">The product details to be created.</param> 
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the created <see cref="T:EStoreX.Core.DTO.Products.Responses.ProductResponse"/>.  
            </returns>
            <response code="200">Product created successfully.</response>
            <response code="400">Invalid product data supplied.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.UpdateProduct(System.Guid,EStoreX.Core.DTO.Products.Requests.ProductUpdateRequest)">
            <summary>
            Updates an existing product.
            </summary>
            <param name="id">The ID of the product to update.</param>
            <param name="productUpdateRequest">The updated product details.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the updated <see cref="T:EStoreX.Core.DTO.Products.Responses.ProductResponse"/>.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> if the IDs do not match.
            </returns>
            <response code="200">Product updated successfully.</response>
            <response code="400">Product ID mismatch or invalid data supplied.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.DeleteProduct(System.Guid)">
            <summary>
            Deletes a product from the database.
            </summary>
            <param name="id">The unique identifier of the product to delete.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/> if the product was deleted.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if no product was found with the given ID.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the ID is invalid.
            </returns>
            <response code="200">Product deleted successfully.</response>
            <response code="400">Invalid product ID supplied.</response>
            <response code="404">Product not found.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all products into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">Products exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.DeleteProductImage(System.Guid,System.Guid)">
            <summary>
            Deletes a specific product image by its ID.
            </summary>
            <param name="productId">The unique identifier of the product.</param>
            <param name="photoId">The unique identifier of the photo to delete.</param>
            <returns>
            <c>200 OK</c> if the image was deleted successfully;  
            <c>404 Not Found</c> if the product or the photo was not found;  
            <c>500 Internal Server Error</c> if an unexpected error occurs.
            </returns>
            <response code="200">Image deleted successfully.</response>
            <response code="404">Product or image not found.</response>
            <response code="500">Unexpected server error.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.AddProductImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Adds images to the specified product.
            </summary>
            <param name="productId">The unique identifier of the product.</param>
            <param name="files">The list of image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were added successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the product does not exist.
            </returns>
            <response code="200">Images added successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Product not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.UpdateProductImages(System.Guid,System.Collections.Generic.List{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            Updates all images of the specified product.
            </summary>
            <remarks>
            This will remove all existing images of the product and replace them with the newly uploaded ones.
            </remarks>
            <param name="productId">The unique identifier of the product.</param>
            <param name="files">The list of new image files to upload.</param>
            <returns>
            <c>200 OK</c> if the images were updated successfully;  
            <c>400 Bad Request</c> if no files were provided;  
            <c>404 Not Found</c> if the product does not exist.
            </returns>
            <response code="200">Images updated successfully.</response>
            <response code="400">No files were provided.</response>
            <response code="404">Product not found.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.RatingsController">
            <summary>
            API controller for managing ratings in the admin area.  
            Provides endpoints for administrators to review, moderate, and delete ratings.  
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.RatingsController.#ctor(EStoreX.Core.ServiceContracts.Ratings.IRatingService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.RatingsController"/> class.
            </summary>
            <param name="ratingService">
            The rating service that provides operations for managing ratings.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.RatingsController.DeleteRatingAsAdmin(System.Guid)">
            <summary>
            Deletes a rating.  
            Admins can delete any rating, while normal users can only delete their own.
            </summary>
            <param name="id">The ID of the rating to delete.</param>
            <returns>No content if successful, otherwise 404 if not found.</returns>
            <response code="204">Rating successfully deleted.</response>
            <response code="404">Rating not found.</response>
            <response code="401">If the user is not authenticated.</response>
            <response code="403">If the user does not have permission to delete this rating.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.RatingsController.GetAllRatingsForAdmin">
            <summary>
            Retrieves all ratings with detailed information for admin users.  
            The response includes the rating ID, product details (name, brand, category),  
            the user who wrote the comment, the comment content, and the score.
            </summary>
            <returns>A list of ratings with related product and user information.</returns>
            <response code="200">Returns the list of ratings with details.</response>
            <response code="401">If the user is not authenticated.</response>
            <response code="403">If the user does not have permission to view ratings.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.UserManagementController">
            <summary>
            user management controller for administrative operations
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.#ctor(EStoreX.Core.ServiceContracts.Account.IUserManagementService,EStoreX.Core.ServiceContracts.Common.IExportService)">
            <summary>
            User management controller constructor
            </summary>
            <param name="userManagementService">Service responsible for management</param>
            <param name="exportService">Service to manage files.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.GetAllUsers">
            <summary>
            Retrieves all users (Admin or SuperAdmin only).
            </summary>
            <returns>A list of all users.</returns>
            <response code="200">Returns the list of users.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.GetUserById(System.String)">
            <summary>
            Retrieves a user by their ID (Admin or SuperAdmin only).
            </summary>
            <param name="id">The ID of the user.</param>
            <returns>User details if found.</returns>
            <response code="200">Returns the user details.</response>
            <response code="404">If the user with the given ID was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.AddAdmin(EStoreX.Core.DTO.Account.Requests.CreateAdminDTO)">
            <summary>
            Creates a new Admin (SuperAdmin only).
            </summary>
            <param name="dto">Admin creation request details.</param>
            <returns>Result of the creation operation.</returns>
            <response code="201">Admin created successfully.</response>
            <response code="400">If the request is invalid or creation failed.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeleteAdmin(System.String)">
            <summary>
            Permanently deletes an admin (SuperAdmin only).
            </summary>
            <param name="id">The ID of the admin to delete.</param>
            <returns>Result of the deletion operation.</returns>
            <response code="200">Admin deleted successfully.</response>
            <response code="404">If the admin was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeleteUser(System.String)">
            <summary>
            Deletes a user (rules depend on roles: SuperAdmin/Admin).
            </summary>
            <param name="id">The ID of the user to delete.</param>
            <returns>Result of the deletion operation.</returns>
            <response code="200">User deleted successfully.</response>
            <response code="400">If deletion is not allowed or invalid.</response>
            <response code="401">If the current user is not authenticated.</response>
            <response code="404">If the user was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeactivateUser(System.String)">
            <summary>
            Deactivates a user (Admin or SuperAdmin).
            </summary>
            <param name="id">The ID of the user to deactivate.</param>
            <returns>Result of the deactivation operation.</returns>
            <response code="200">User deactivated successfully.</response>
            <response code="404">If the user was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.ActivateUser(System.String)">
            <summary>
            Activates a user (Admin or SuperAdmin).
            </summary>
            <param name="id">The ID of the user to activate.</param>
            <returns>Result of the activation operation.</returns>
            <response code="200">User activated successfully.</response>
            <response code="404">If the user was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.AssignRole(EStoreX.Core.DTO.Account.Requests.UpdateUserRoleDTO)">
            <summary>
            Assigns a role to a user (SuperAdmin only).
            </summary>
            <param name="dto">Role assignment details.</param>
            <returns>Result of the assignment operation.</returns>
            <response code="200">Role assigned successfully.</response>
            <response code="400">If assignment failed.</response>
            <response code="404">If the user was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.RemoveRole(EStoreX.Core.DTO.Account.Requests.UpdateUserRoleDTO)">
            <summary>
            Removes a role from a user (SuperAdmin only).
            </summary>
            <param name="dto">Role removal details.</param>
            <returns>Result of the removal operation.</returns>
            <response code="200">Role removed successfully.</response>
            <response code="400">If removal failed.</response>
            <response code="404">If the user was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.Export(EStoreX.Core.Enums.ExportType)">
            <summary>
            Exports all users into the specified file format.
            </summary>
            <param name="type">
            The type of export format.  
            Supported values are:  
            <list type="bullet">
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Csv"/> → Comma Separated Values file (.csv)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Excel"/> → Microsoft Excel file (.xlsx)</description></item>
              <item><description><see cref="F:EStoreX.Core.Enums.ExportType.Pdf"/> → Portable Document Format file (.pdf)</description></item>
            </list>
            </param>
            <returns>
            A downloadable file in the selected export format.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if the format is not supported.
            </returns>
            <response code="200">users exported successfully in the requested format.</response>
            <response code="400">Unsupported export type requested.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.GetAdmins">
            <summary>
            Retrieves all users who are either Admins or SuperAdmins.
            </summary>
            <returns>A list of Admin and SuperAdmin users.</returns>
            <response code="200">Returns the list of users.</response>
            <response code="404">If no Admin or SuperAdmin users were found.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.AccountController">
            <summary>
            Controller responsible for handling user authentication-related actions
            such as registration, login, email confirmation, and password reset for the E-StoreX API.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.#ctor(EStoreX.Core.ServiceContracts.Account.IAuthenticationService,AutoMapper.IMapper,Microsoft.AspNetCore.Identity.SignInManager{EStoreX.Core.Domain.IdentityEntities.ApplicationUser},EStoreX.Core.ServiceContracts.Account.IApiClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.AccountController"/> class.
            </summary>
            <param name="authService">
            The authentication service that handles user registration, login, 
            email confirmation, and password reset logic.
            </param>
            <param name="mapper">
            mapper instance for mapping between DTOs and domain entities.
            </param>
            <param name="signInManager">
            sign-in manager for handling user sign-in operations,
            </param>
            <param name="clientService">
            Service to validate client id and platform.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostRegister(EStoreX.Core.DTO.Account.Requests.RegisterDTO)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="registerDTO">
            An object containing user registration details like username, email, and password.
            </param>
            <returns>
            Returns a response depending on the outcome of the registration process.
            </returns>
            <response code="200">Registration succeeded. The user account has been created successfully.</response>
            <response code="400">
            Registration failed due to invalid input.
            For example:
            - Missing required fields (username, email, or password)
            - Password does not meet security requirements
            - Email format is invalid
            </response>
            <response code="409">
            Registration failed because the email or username is already in use.
            The system does not allow duplicate accounts with the same email.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostLogin(EStoreX.Core.DTO.Account.Requests.LoginDTO)">
            <summary>
            Authenticates an existing user and generates a JWT token.
            </summary>
            <param name="loginDTO">
            The user's login credentials (email and password).
            </param>
            <returns>
            Returns a response based on the login outcome.
            </returns>
            <response code="200">
            Login succeeded. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiSuccessResponse"/> with a JWT token and refresh token.
            </response>
            <response code="400">
            Bad Request – Input invalid. Examples include:
            - loginDTO is null
            - Email or password missing
            - Invalid input format
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> with details.
            </response>
            <response code="401">
            Unauthorized – Invalid credentials. 
            The email/password combination does not match any user account.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="403">
            Forbidden – User's email is not confirmed yet. 
            The system requires email verification before login.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="404">
            Not Found – User does not exist with the provided email.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="423">
            Locked – Account temporarily locked due to multiple failed login attempts.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> explaining the lockout period.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ConfirmEmail(EStoreX.Core.DTO.Account.Requests.ConfirmEmailDTO)">
            <summary>
            Confirms a user's email using the provided user ID and token.
            </summary>
            <param name="dto">
            Contains the user ID, email confirmation token, and an optional redirect URL.
            </param>
            <returns>
            Returns a response based on the confirmation outcome.
            </returns>
            <response code="200">
            Email confirmed successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with success message.
            </response>
            <response code="400">
            Bad Request – Invalid confirmation data. Examples include:
            - dto is null
            - UserId or Token is missing
            - Token format invalid
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> with details.
            </response>
            <response code="404">
            Not Found – User with the provided ID does not exist.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ForgotPassword(EStoreX.Core.DTO.Account.Requests.ForgotPasswordDTO)">
            <summary>
            Sends a password reset link to the user's email address.
            </summary>
            <param name="dto">
            Contains the email address of the user who requested a password reset.
            </param>
            <returns>
            Returns a response based on the outcome of the request.
            </returns>
            <response code="200">
            Password reset link sent successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with success message.
            </response>
            <response code="400">
            Bad Request – Invalid input. Examples include:
            - dto is null
            - Email is missing or malformed
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> with details.
            </response>
            <response code="429">
            Too Many Requests – User has requested password reset too frequently.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> indicating rate limiting.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.VerifyResetPassword(EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO)">
            <summary>
            Verifies the validity of a reset password token for a given user.
            </summary>
            <param name="dto">
            Contains the User ID and reset token to validate.
            </param>
            <returns>
            Returns a response indicating whether the token is valid or not.
            </returns>
            <response code="200">
            Token is valid. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> confirming token validity.
            </response>
            <response code="400">
            Bad Request – Invalid input. Examples include:
            - dto is null
            - UserId or Token is missing
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> with error details.
            </response>
            <response code="404">
            Not Found – Token is invalid, expired, or user does not exist.
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> indicating the problem.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ResetPassword(EStoreX.Core.DTO.Account.Requests.ResetPasswordDTO)">
            <summary>
            Resets the user's password using a valid token.
            </summary>
            <param name="dto">
            Contains user ID, reset token, and new password details.
            </param>
            <returns>
            Returns a response indicating whether the password was successfully reset.
            </returns>
            <response code="200">
            Password reset succeeded. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> confirming the update.
            </response>
            <response code="400">
            Bad Request – Input is invalid or password rules are not met. Examples include:
            - dto is null
            - UserId, Token, or NewPassword missing
            - Password does not meet complexity requirements
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> with detailed error messages.
            </response>
            <response code="404">
            Not Found – User not found or token invalid/expired. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.RefreshToken(EStoreX.Core.DTO.Account.Responses.TokenModel)">
            <summary>
            Generates a new access token (and refresh token) using a valid refresh token.
            </summary>
            <param name="model">
            Contains the expired access token and its corresponding refresh token.
            </param>
            <returns>
            Returns a response indicating whether the token refresh succeeded.
            </returns>
            <response code="200">
            Token refreshed successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiSuccessResponse"/> containing the new JWT and refresh token.
            </response>
            <response code="400">
            Bad Request – Input is invalid, missing, or the refresh token is expired/does not match the user. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="404">
            Not Found – User associated with the token does not exist. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.UpdateAddress(EStoreX.Core.DTO.Orders.Requests.ShippingAddressDTO)">
            <summary>
            Updates the authenticated user's shipping address.
            </summary>
            <param name="addressDTO">
            The <see cref="T:EStoreX.Core.DTO.Orders.Requests.ShippingAddressDTO"/> containing the new address information.
            </param>
            <returns>
            Returns a response indicating whether the address update was successful.
            </returns>
            <response code="200">
            Address updated successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="400">
            Bad Request – Input is null, invalid, or address update failed. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="401">
            Unauthorized – The user is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.GetAddress">
            <summary>
            Retrieves the shipping address of the currently authenticated user.
            </summary>
            <remarks>
            Requires the user to be authenticated. The user's email is extracted from the JWT claims
            and used to fetch the associated shipping address from the authentication service.
            </remarks>
            <returns>
            Returns the shipping address if found, or an error response if retrieval fails.
            </returns>
            <response code="200">
            Shipping address retrieved successfully. Returns <see cref="T:EStoreX.Core.DTO.Orders.Requests.ShippingAddressDTO"/>.
            </response>
            <response code="400">
            Bad Request – User email is missing in claims or address could not be retrieved. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/> or <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="401">
            Unauthorized – User is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostLogout">
            <summary>
            Logs out the currently authenticated user by clearing their refresh token and signing them out.
            </summary>
            <remarks>
            Requires the user to be authenticated. The user's email is extracted from the JWT claims
            to identify the account to log out. Refresh tokens are cleared and the user is signed out.
            </remarks>
            <returns>
            Returns a success message if logout succeeds, or an unauthorized response if the user is not authenticated.
            </returns>
            <response code="200">
            Logout successful. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="401">
            Unauthorized – The user is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.GetCurrentUser">
            <summary>
            Retrieves information about the currently authenticated user.
            </summary>
            <remarks>
            Requires the user to be authenticated. The endpoint reads the user ID from the JWT claims
            and fetches the corresponding user details from the authentication service.
            </remarks>
            <returns>
            Returns detailed information about the authenticated user.
            </returns>
            <response code="200">
            User found and returned successfully. Returns <see cref="T:EStoreX.Core.DTO.Account.Responses.ApplicationUserResponse"/>.
            </response>
            <response code="400">
            Bad Request – No user ID found in claims. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="404">
            Not Found – User does not exist. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="401">
            Unauthorized – The user is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.UpdateUserProfile(EStoreX.Core.DTO.Account.Requests.UpdateUserDTO)">
            <summary>
            Updates the authenticated user's profile information, including display name, 
            phone number, and optionally their password.
            </summary>
            <param name="dto">
            An <see cref="T:EStoreX.Core.DTO.Account.Requests.UpdateUserDTO"/> object containing the new profile data, 
            including current password and new password if the password is being changed.
            </param>
            <returns>
            Returns detailed result of the update operation.
            </returns>
            <response code="200">
            Profile updated successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="400">
            Bad Request – Invalid update data, e.g., null DTO or invalid fields. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="401">
            Unauthorized – User is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="403">
            Forbidden – User ID in token does not match the DTO's user ID. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="404">
            Not Found – User does not exist. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ExternalLogin(EStoreX.Core.Enums.ExternalLoginProvider,System.Guid)">
            <summary>
            Initiates the external login process by redirecting the user to the chosen authentication provider (e.g., Google, GitHub).
            </summary>
            <param name="provider">
            The external authentication provider to use (e.g., "Google", "GitHub").
            </param>
            <param name="clientId">
            Unique identifier for the calling client.
            </param>
            <returns>
            Returns a challenge result that redirects the user to the external provider's login page.
            </returns>
            <remarks>
            Configures the external authentication properties, sets the redirect URL 
            to handle the provider's callback, and prompts the user to select an account.
            </remarks>
            <response code="302">
            Redirect/Challenge to external provider's login page.
            </response>
            <response code="400">
            Bad Request – The 'provider' query parameter is missing or invalid. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ExternalLoginCallback(System.String)">
            <summary>
            Handles the callback from the external login provider after the authentication attempt.
            </summary>
            <param name="remoteError">
            Optional error message returned by the external provider during the authentication process.
            </param>
            <returns>
            Returns the authentication response including status code and relevant data or error messages.
            </returns>
            <remarks>
            Processes the external login result by calling <see cref="!:_authService.ExternalLoginCallbackAsync"/>.
            </remarks>
            <response code="200">
            Login successful. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiSuccessResponse"/> with user info and JWT tokens.
            </response>
            <response code="400">
            Bad Request – Remote error returned by the external provider, or missing required external login info.
            </response>
            <response code="401">
            Unauthorized – User is not authenticated or external login could not be linked.
            </response>
            <response code="409">
            Conflict – The email from the external provider is already registered with an existing account.
            </response>
            <response code="500">
            Internal Server Error – Failed to create user account or link external login due to server error.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.DeleteAccount">
            <summary>
            Permanently deletes the currently authenticated user's account.
            </summary>
            <remarks>
            This action requires authentication. Once deleted, the account cannot be restored.
            </remarks>
            <response code="200">Account deleted successfully.</response>
            <response code="404">User not found.</response>
            <response code="500">An error occurred while deleting the account.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ResendConfirmationEmail(EStoreX.Core.DTO.Account.Requests.ResendEmailRequest)">
            <summary>
            Resends the account confirmation email to the specified user.
            </summary>
            <remarks>
            Use this endpoint if you haven't received or have lost the original confirmation email.  
            Provide your registered email address, and the system will send a new confirmation email 
            to that address if the account exists and is not already confirmed.
            </remarks>
            <param name="request">The request containing the email address of the user.</param>
            <returns>
            <c>200 OK</c> if the confirmation email was resent successfully;  
            <c>400 Bad Request</c> if the email is already confirmed or the input is invalid;  
            <c>404 Not Found</c> if no account exists with the provided email;  
            <c>500 Internal Server Error</c> for unexpected failures during the email sending process.
            </returns>
            <response code="200">Confirmation email resent successfully.</response>
            <response code="400">The email is already confirmed or invalid request.</response>
            <response code="404">No user found with the provided email.</response>
            <response code="500">An unexpected error occurred while sending the confirmation email.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.UploadUserPhoto(EStoreX.Core.DTO.Account.Requests.UploadUserPhotoDto)">
            <summary>
            Uploads (or replaces) the authenticated user's profile photo.
            </summary>
            <param name="dto">
            The image file to upload. Only one file is allowed.
            </param>
            <returns>
            Returns detailed result of the upload operation.
            </returns>
            <response code="200">
            Photo uploaded successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="400">
            Bad Request – No file provided. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="401">
            Unauthorized – User is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="404">
            Not Found – User does not exist. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.DeleteUserPhoto">
            <summary>
            Deletes the authenticated user's profile photo.
            </summary>
            <returns>
            Returns detailed result of the delete operation.
            </returns>
            <response code="200">
            Photo deleted successfully. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="400">
            Bad Request – User has no photo to delete. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
            <response code="401">
            Unauthorized – User is not authenticated. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/>.
            </response>
            <response code="404">
            Not Found – User does not exist. Returns <see cref="T:EStoreX.Core.DTO.Common.ApiErrorResponse"/>.
            </response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.BasketsController">
            <summary>
            API controller for managing customer baskets.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.#ctor(EStoreX.Core.ServiceContracts.Basket.IBasketService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.BasketsController"/> class.
            </summary>
            <param name="basketService">basket service</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.GetBasket(System.String)">
            <summary>
            Retrieves a customer basket by ID.
            </summary>
            <param name="id">
            The customer ID (must be a valid GUID).
            </param>
            <returns>
            Returns the basket data or an error response depending on the outcome.
            </returns>
            <response code="200">
            Basket found. Returns <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/> containing the basket details.
            </response>
            <response code="400">
            Bad Request – The provided ID is null or not a valid GUID format.
            </response>
            <response code="404">
            Not Found – No basket exists for the given ID.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.AddOrUpdateBasket(EStoreX.Core.DTO.Basket.BasketAddRequest)">
            <summary>
            Adds or updates a customer basket.
            </summary>
            <param name="basket">
            The basket to add or update, represented as a <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/>.
            </param>
            <returns>
            Returns the updated or newly created basket, or an error response depending on the outcome.
            </returns>
            <response code="200">
            OK – Basket successfully created or updated.  
            Returns <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/> containing the basket details.
            </response>
            <response code="400">
            Bad Request – The basket ID format is invalid, or there are no valid items to update.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.DeleteBasket(System.String)">
            <summary>
            Deletes a customer basket by ID.
            </summary>
            <param name="id">
            The customer basket ID (must be a valid GUID).
            </param>
            <returns>
            Returns a success or error response depending on the outcome.
            </returns>
            <response code="200">
            OK – Basket successfully deleted.  
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with a success message.
            </response>
            <response code="400">
            Bad Request – The basket ID format is invalid.
            </response>
            <response code="404">
            Not Found – No basket exists with the given ID or it has already been deleted.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.MergeBasket(System.String)">
            <summary>
            Merges the guest basket (created before login) with the authenticated user's basket.
            </summary>
            <param name="guestId">
            The basket ID generated for the guest session before login (must be a valid GUID).
            </param>
            <returns>
            A merged basket if the operation succeeds.
            </returns>
            <response code="200">
            OK – Returns the merged <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/>.
            </response>
            <response code="400">
            Bad Request – The guest basket ID format is invalid.
            </response>
            <response code="401">
            Unauthorized – The user is not logged in.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.DecreaseItemQuantity(System.String,System.Guid)">
            <summary>
            Decreases the quantity of a specific item in the customer's basket by 1.  
            If the quantity reaches zero, the item will be removed from the basket.
            </summary>
            <param name="basketId">
            The unique identifier of the basket (must be a valid GUID).
            </param>
            <param name="productId">
            The unique identifier of the product to decrease the quantity for.
            </param>
            <returns>
            The updated basket if the operation succeeds.
            </returns>
            <response code="200">
            OK – Returns the updated <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/>.
            </response>
            <response code="400">
            Bad Request – The basket ID format is invalid.
            </response>
            <response code="404">
            Not Found – The basket or item does not exist.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.RemoveItemFromBasket(System.String,System.Guid)">
            <summary>
            Removes a specific item from the customer's basket.
            </summary>
            <param name="basketId">
            The unique identifier of the basket (must be a valid GUID).
            </param>
            <param name="productId">
            The unique identifier of the product to remove.
            </param>
            <returns>
            The updated basket if the operation succeeds.
            </returns>
            <response code="200">
            OK – Returns the updated <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/>.
            </response>
            <response code="400">
            Bad Request – The basket ID format is invalid.
            </response>
            <response code="404">
            Not Found – The basket or item does not exist.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.IncreaseItemQuantity(System.String,System.Guid)">
            <summary>
            Increases the quantity of a specific item in the customer's basket.
            </summary>
            <param name="basketId">The identifier of the basket.</param>
            <param name="productId">The identifier of the product to increase quantity for.</param>
            <response code="400">Returned if the basket id format is invalid.</response>
            <response code="404">Returned if the basket or item is not found.</response>
            <response code="200">Returned with the updated basket.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.ApplyDiscount(System.String,System.String)">
            <summary>
            Applies a discount code to a customer's basket.
            </summary>
            <param name="basketId">The unique identifier of the basket to which the discount will be applied.</param>
            <param name="code">The discount code provided by the customer.</param>
            <returns>
            Returns <see cref="T:EStoreX.Core.DTO.Basket.CustomerBasketDTO"/> with the updated basket if the discount is successfully applied.  
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with 404 status if the basket or discount code is not found.
            </returns>
            <response code="200">The basket with the discount successfully applied.</response>
            <response code="404">Basket or discount not found.</response>
            <remarks>
            This endpoint requires authentication.  
            Example request:  
            POST /api/basket/{basketId}/apply-discount/{code}
            </remarks>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.BrandsController">
            <summary>
            Public controller for retrieving brand information in API version 1.0.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.#ctor(EStoreX.Core.ServiceContracts.Products.IBrandService)">
            <summary>
            Initializes a new instance of <see cref="T:E_StoreX.API.Controllers.Public.BrandsController"/>.
            </summary>
            <param name="brandsService">Service to manage brand operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.GetAll">
            <summary>
            Retrieves all brands.
            </summary>
            <returns>List of all brands.</returns>
            <response code="200">Returns the list of brands.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.GetById(System.Guid)">
            <summary>
            Retrieves a brand by its unique ID.
            </summary>
            <param name="id">The ID of the brand to retrieve.</param>
            <returns>The brand details if found.</returns>
            <response code="200">Brand found and returned successfully.</response>
            <response code="404">Brand not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.GetBrandByName(System.String)">
            <summary>
            Retrieves a brand by its name.
            </summary>
            <param name="name">The exact name of the brand to search for.</param>
            <returns>
            Returns <see cref="T:Domain.Entities.Product.Brand"/> with HTTP 200 OK if the brand is found.  
            Returns <see cref="T:EStoreX.Core.DTO.Common.ApiResponse"/> with HTTP 404 Not Found if the brand does not exist.
            </returns>
            <response code="200">Brand found and returned successfully.</response>
            <response code="404">Brand with the specified name was not found.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.GetCategoriesByBrand(System.Guid)">
            <summary>
            Get all categories that a brand belongs to.
            </summary>
            <param name="brandId">The unique identifier of the brand.</param>
            <returns>List of categories associated with the brand.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BrandsController.GetBrandImages(System.Guid)">
            <summary>
            Retrieves all images associated with a specific brand.
            </summary>
            <param name="brandId">The unique identifier of the brand.</param>
            <returns>
            <c>200 OK</c> with a list of brand images;  
            <c>404 Not Found</c> if the brand does not exist or has no images.
            </returns>
            <response code="200">Brand images retrieved successfully.</response>
            <response code="404">No images found for the given brand.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.BugController">
            <summary>
            Controller for handling bug-related operations.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetError">
            <summary>
            Returns a 500 Internal Server Error response.
            </summary>
            <returns>A 500 status code with a message indicating an internal server error.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetNotFound">
            <summary>
            Returns a 404 Not Found response.
            </summary>
            <returns>A 404 status code with a message indicating the resource was not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetBadRequest(System.Guid)">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetBadRequest">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.CategoriesController">
            <summary>
            Controller for managing product categories in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.Categories.ICategoriesService)">
            <summary>
            Constructor for CategoriesController.
            </summary>
            <param name="categoriesService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetCategories">
            <summary>
            Retrieves all categories from the database.
            </summary>
            <returns>
            A list of <see cref="T:EStoreX.Core.DTO.Categories.Responses.CategoryResponse"/> objects representing all categories.
            </returns>
            <response code="200">
            OK – Returns the list of categories.
            </response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetCategoryById(System.Guid)">
            <summary>
            Retrieves a category by its unique ID.
            </summary>
            <param name="Id">The unique identifier (GUID) of the category to retrieve.</param>
            <response code="200">Successfully retrieved the category.</response>
            <response code="400">Invalid category ID format.</response>
            <response code="404">Category not found.</response>
            <response code="500">Unexpected error occurred.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetBrandsByCategory(System.Guid)">
            <summary>
            Get all brands inside a category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <returns>List of brands associated with the category.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetCategoryImages(System.Guid)">
            <summary>
            Retrieves all images associated with a specific category.
            </summary>
            <param name="categoryId">The unique identifier of the category.</param>
            <returns>
            <c>200 OK</c> with a list of category images;  
            <c>404 Not Found</c> if the category does not exist or has no images.
            </returns>
            <response code="200">Category images retrieved successfully.</response>
            <response code="404">No images found for the given category.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.CustomControllerBase">
            <summary>
            Base controller for the E-StoreX API, providing common functionality for all controllers.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CustomControllerBase.#ctor">
            <summary>
            Constructor for CustomControllerBase, initializing the unit of work.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.DeliveryMethodController">
            <summary>
            DeliveryMethodController handles operations related to delivery methods.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DeliveryMethodController.#ctor(EStoreX.Core.ServiceContracts.Orders.IDeliveryMethodService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.DeliveryMethodController"/> class.
            </summary>
            <param name="deliveryMethod">object of <see cref="T:EStoreX.Core.ServiceContracts.Orders.IDeliveryMethodService"/></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DeliveryMethodController.GetDeliveryMethods">
            <summary>
            Retrieves all available delivery methods.
            </summary>
            <returns>
            A list of <see cref="T:EStoreX.Core.DTO.Orders.Responses.DeliveryMethodResponse"/> objects representing delivery options.
            </returns>
            <response code="200">Successfully retrieved the delivery methods.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DeliveryMethodController.GetById(System.Guid)">
            <summary>
            Retrieves a delivery method by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the delivery method.</param>
            <returns>The delivery method with the specified ID.</returns>
            <response code="200">Returns the delivery method.</response>
            <response code="404">Delivery method not found.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DeliveryMethodController.GetByName(System.String)">
            <summary>
            Gets a delivery method by its name.
            </summary>
            <param name="name">The exact name of the delivery method to search for.</param>
            <returns>The delivery method with the specified Name</returns>
            <response code="200">Returns the delivery method.</response>
            <response code="404">Delivery method not found.</response>
            <response code="401">Unauthorized user.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.DiscountsController">
            <summary>
            Provides endpoints for clients to apply and validate discount codes.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DiscountsController.#ctor(EStoreX.Core.ServiceContracts.Discount.IDiscountService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.DiscountsController"/> class.
            </summary>
            <param name="discountService">Service for managing discounts.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.DiscountsController.Validate(System.String)">
            <summary>
            Validates a discount code to check if it is active and usable.
            </summary>
            <param name="code">The discount code to validate.</param>
            <returns>Status of the discount code validation.</returns>
            <response code="200">Discount code is valid.</response>
            <response code="400">Discount code is invalid or inactive.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.ErrorController">
            <summary>
            Controller responsible for handling error responses.  
            Provides a unified endpoint for returning standardized error messages 
            based on HTTP status codes.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ErrorController.Error(System.Int32)">
            <summary>
            Returns an error response with the specified HTTP status code.
            </summary>
            <param name="statusCode">The HTTP status code to include in the response.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult"/> containing a <see cref="T:E_StoreX.API.Helper.ResponseAPI"/> 
            with details about the error.
            </returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.FavouritesController">
            <summary>
            Controller responsible for managing user's favourite products.
            Provides endpoints to add, remove, and retrieve favourites for the authenticated user.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.#ctor(EStoreX.Core.ServiceContracts.Favourites.IFavouriteService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.FavouritesController"/> class.
            </summary>
            <param name="favouriteService">The service that handles favourite-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.AddToFavourite(System.Guid)">
            <summary>
            Adds a product to the authenticated user's list of favourites.
            </summary>
            <param name="productId">The unique identifier of the product to add.</param>
            <returns>
            <c>200 OK</c> if the product was successfully added to favourites;
            <c>401 Unauthorized</c> if the user is not authenticated or the user ID is invalid;
            <c>409 Conflict</c> if the product is already in the user's favourites;
            <c>500 Internal Server Error</c> for unexpected server errors.
            </returns>
            <response code="200">Product successfully added to favourites.</response>
            <response code="401">User is not authenticated or has an invalid identifier.</response>
            <response code="409">The product is already in the user's favourites.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.RemoveFromFavourite(System.Guid)">
            <summary>
            Removes a product from the authenticated user's list of favourites.
            </summary>
            <param name="productId">The unique identifier of the product to remove.</param>
            <returns>
            <c>200 OK</c> if the product was successfully removed from favourites;
            <c>401 Unauthorized</c> if the user is not authenticated or the user ID is invalid;
            <c>404 Not Found</c> if the product is not in the user's favourites;
            <c>500 Internal Server Error</c> for unexpected server errors.
            </returns>
            <response code="200">Product successfully removed from favourites.</response>
            <response code="401">User is not authenticated or has an invalid identifier.</response>
            <response code="404">The product was not found in the user's favourites.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.GetUserFavourites">
            <summary>
            Retrieves all products in the authenticated user's favourites list.
            </summary>
            <returns>
            <c>200 OK</c> with the list of favourites if the user is authenticated;
            <c>401 Unauthorized</c> if the user is not authenticated or the user ID is invalid;
            <c>500 Internal Server Error</c> for unexpected server errors.
            </returns>
            <response code="200">Successfully retrieved the list of favourite products.</response>
            <response code="401">User is not authenticated or has an invalid identifier.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.FrontendProxyController">
            <summary>
            Controller that acts as a proxy between the frontend and backend for password reset functionality.
            </summary>
            <remarks>
            This controller is useful when the frontend cannot directly call the backend API due to security restrictions,
            such as the need to hide the API key.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.#ctor(System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.FrontendProxyController"/> class.
            </summary>
            <param name="httpClientFactory">The factory used to create <see cref="T:System.Net.Http.HttpClient"/> instances.</param>
            <param name="configuration">The configuration provider used to access API settings.</param>
            <param name="httpContextAccessor">
            Provides access to the current HTTP context, allowing retrieval of request-specific data
            such as the scheme, host, and path for constructing full URLs.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.ResetPasswordProxy(EStoreX.Core.DTO.Account.Requests.ResetPasswordDTO)">
            <summary>
            Acts as a proxy endpoint that forwards a password reset request from the frontend to the backend API.
            </summary>
            <param name="request">The password reset request body sent from the frontend.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that contains the response returned by the backend API.
            Possible status codes include:
            - 200 OK if the reset was successful,
            - 4xx for client-side errors (e.g. invalid input, rate limits),
            - 5xx for server errors or connectivity issues.
            </returns>
            <remarks>
            This method reads the backend API URL and API key from the configuration, builds the full URL using the
            current HTTP request context, and forwards the request to the backend with the necessary headers.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.VerifyResetPassword(EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO)">
            <summary>
            Acts as a proxy endpoint that forwards a verify reset password request from the frontend to the backend API.
            </summary>
            <param name="request">
            A <see cref="T:EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO"/> that contains the user's ID and the reset token.
            These parameters are passed from the frontend via query string.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that contains the response from the backend.
            Status codes returned:
            - 200 OK: if the token is valid,
            - 400 Bad Request: if the token is invalid or expired,
            - 500 Internal Server Error: if the HTTP context is unavailable or another error occurs.
            </returns>
            <remarks>
            This endpoint constructs the backend verification URL using the current request scheme and host, 
            appends the API key in the headers, and relays the GET request with query parameters.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.ConfirmEmail(EStoreX.Core.DTO.Account.Requests.ConfirmEmailDTO)">
            <summary>
            Acts as a proxy endpoint that forwards an email confirmation request 
            from the frontend to the backend API.
            </summary>
            <param name="request">
            A <see cref="T:EStoreX.Core.DTO.Account.Requests.ConfirmEmailDTO"/> that contains the user's ID and confirmation token.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the backend response:
            - 200 OK: if the confirmation succeeded,
            - 400 Bad Request: if the token is invalid or expired,
            - 500 Internal Server Error: if the HTTP context is unavailable or another error occurs.
            </returns>
            <remarks>
            This method builds the backend confirmation URL using the current request scheme and host, 
            attaches query parameters (userId + token), and sends a GET request with the API key header.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.ProxyLogin(EStoreX.Core.DTO.Account.Requests.LoginDTO)">
            <summary>
            Acts as a proxy endpoint that forwards a login request from the frontend to the backend API.
            </summary>
            <param name="request">
            A <see cref="T:EStoreX.Core.DTO.Account.Requests.LoginDTO"/> containing the user's email and password.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing:
            - 200 OK: if the login succeeded and the JWT token is returned,  
            - 401 Unauthorized: if the credentials are invalid,  
            - 4xx/5xx: if other errors occur (e.g. backend unavailable).  
            </returns>
            <remarks>
            This method hides the API key from the frontend by sending the login request through the backend.  
            If successful, the returned JWT token is stored securely in an HTTP-only cookie and can be used by  
            Hangfire Dashboard or other backend services that rely on authentication.  
            </remarks>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.OrdersController">
            <summary>
            Controller responsible for handling order-related operations.
            Requires the user to be authenticated.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.#ctor(EStoreX.Core.ServiceContracts.Orders.IOrderService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.OrdersController"/> class.
            </summary>
            <param name="orderService">The service that handles order-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.CreateOrder(EStoreX.Core.DTO.Orders.Requests.OrderAddRequest)">
            <summary>
            Creates a new order for the authenticated user.
            </summary>
            <param name="order">The order data to be created.</param>
            <returns>
            <c>200 OK</c> with the created order details if successful;
            <c>400 Bad Request</c> if the user email is not found in the JWT token;
            <c>500 Internal Server Error</c> for unexpected errors.
            </returns>
            <response code="200">Returns the newly created order.</response>
            <response code="400">If the user email is not present in the JWT token.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetOrders">
            <summary>
            Retrieves all orders associated with the currently authenticated user.
            </summary>
            <returns>A list of <see cref="T:EStoreX.Core.DTO.Orders.Responses.OrderResponse"/> objects representing the user's orders.</returns>
            <response code="200">Returns the list of user's orders.</response>
            <response code="400">If the user email is missing or invalid in the token.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetOrdersById(System.Guid)">
            <summary>
            Retrieves a specific order by its ID for the currently authenticated user.
            </summary>
            <param name="Id">The unique identifier of the order.</param>
            <returns>
            Returns <see cref="T:EStoreX.Core.DTO.Orders.Responses.OrderResponse"/> if the order exists and belongs to the user; 
            otherwise, returns <c>null</c>.
            </returns>
            <response code="200">Returns the requested order (can be null if not found).</response>
            <response code="400">If the user email is missing in the JWT token.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetDeliveryMethods">
            <summary>
            Retrieves all available delivery methods.
            </summary>
            <returns>
            A list of <see cref="T:EStoreX.Core.DTO.Orders.Responses.DeliveryMethodResponse"/> objects representing delivery options.
            </returns>
            <response code="200">Successfully retrieved the delivery methods.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.PaymentsController">
            <summary>
            Handles payment-related operations such as creating or updating Stripe payment intents.
            </summary>
            <remarks>
            This controller is secured with [Authorize], meaning all endpoints require authenticated users.
            Typically called before placing an order to prepare or update the payment.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.#ctor(EStoreX.Core.ServiceContracts.Common.IPaymentService,Microsoft.Extensions.Options.IOptions{EStoreX.Core.Domain.Options.StripeSettings},Microsoft.Extensions.Logging.ILogger{E_StoreX.API.Controllers.Public.PaymentsController})">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.PaymentsController"/> class.
            Handles payment operations including creating payment intents and processing webhooks.
            </summary>
            <param name="paymentService">Service for handling payment-related business logic.</param>
            <param name="options">Stripe configuration options (e.g., signing secret).</param>
            <param name="logger">Logger instance for logging payment events and errors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if Stripe signing secret is not provided in configuration.</exception>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.CreateOrUpdatePaymentIntent(System.String,System.Guid)">
            <summary>
            Creates or updates a Stripe payment intent for the specified basket and delivery method.
            </summary>
            <param name="basketId">The ID of the customer's basket. Cannot be null or empty.</param>
            <param name="deliveryMethodId">The ID of the selected delivery method.</param>
            <returns>
            Returns the updated <see cref="T:EStoreX.Core.DTO.Common.PaymentIntentDTO"/> containing the PaymentIntentId and ClientSecret.
            </returns>
            <response code="200">Successfully created or updated the payment intent.</response>
            <response code="400">Invalid basketId or delivery method ID.</response>
            <response code="404">Basket not found.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.UpdateStatusWithStripe">
             <summary>
             Handles incoming Stripe webhook events to update the order status based on the payment result.
             </summary>
             <remarks>
             This endpoint is called by Stripe to notify about payment intent status changes such as success or failure.
             It validates the Stripe signature and updates the related order accordingly.
            
             Expected events:
             <list type="bullet">
               <item>
                 <term>payment_intent.succeeded</term>
                 <description>Updates the order status to PaymentReceived.</description>
               </item>
               <item>
                 <term>payment_intent.payment_failed</term>
                 <description>Updates the order status to PaymentFailed.</description>
               </item>
             </list>
             </remarks>
             <returns>
             <see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/> if the webhook is processed successfully.
             <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> if validation fails.
             </returns>
             <response code="200">Webhook processed successfully.</response>
             <response code="400">Invalid Stripe signature or processing error.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.ProductsController">
            <summary>
            Handles product-related operations such as retrieving all products or fetching product details by ID.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.#ctor(EStoreX.Core.ServiceContracts.Products.IProductsService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.ProductsController"/> class.
            </summary>
            <param name="productsService">Service for managing product operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetAllProducts(EStoreX.Core.DTO.Products.Responses.ProductQueryDTO)">
            <summary>
            Retrieves all products with optional filtering and pagination.
            </summary>
            <param name="query">Query parameters for filtering, searching, and pagination.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with a paginated list of <see cref="T:EStoreX.Core.DTO.Products.Responses.ProductResponse"/> objects if products exist.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> (204) if no products match the query.
            </returns>
            <response code="200">Successfully retrieved the list of products.</response>
            <response code="204">No products found for the given query.</response>
            <response code="500">Unexpected error occurred.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetProductById(System.Guid)">
            <summary>
            Retrieves a product by its unique identifier.
            </summary>
            <param name="Id">The unique identifier of the product.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the <see cref="T:EStoreX.Core.DTO.Products.Responses.ProductResponse"/> if found.  
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundObjectResult"/> if the product does not exist.
            </returns>
            <response code="200">Successfully retrieved the product.</response>
            <response code="404">Product not found or invalid ID.</response>
            <response code="500">Unexpected error occurred.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetProductImages(System.Guid)">
            <summary>
            Retrieves all images associated with a specific product.
            </summary>
            <param name="productId">The unique identifier of the product.</param>
            <returns>
            <c>200 OK</c> with a list of product images;  
            <c>404 Not Found</c> if the product does not exist or has no images.
            </returns>
            <response code="200">Product images retrieved successfully.</response>
            <response code="404">No images found for the given product.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetBestSellers(System.Int32)">
            <summary>
            Retrieves the top N best-selling products.
            </summary>
            <param name="count">The number of best-selling products to return (e.g., 5, 10, 20).</param>
            <returns>
            <c>200 OK</c> with the best-selling products;  
            <c>400 Bad Request</c> if the count is invalid;  
            <c>404 Not Found</c> if no products exist.
            </returns>
            <response code="200">Best sellers retrieved successfully.</response>
            <response code="400">Invalid count provided.</response>
            <response code="404">No products found.</response>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.RatingsController">
            <summary>
            Handles all operations related to product ratings,
            including creating, updating, deleting, and retrieving ratings and summaries.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.#ctor(EStoreX.Core.ServiceContracts.Ratings.IRatingService)">
            <summary>
            Initializes a new instance of <see cref="T:E_StoreX.API.Controllers.Public.RatingsController"/>.
            </summary>
            <param name="ratingService">The service responsible for rating operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.AddRating(EStoreX.Core.DTO.Ratings.Requests.RatingAddRequest)">
            <summary>
            Adds a new rating for a given product by the logged-in user.
            </summary>
            <param name="request">The rating details including score, comment, and product ID.</param>
            <returns>The created rating as a <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/>.</returns>
            <response code="200">Successfully added the rating.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.UpdateRating(System.Guid,EStoreX.Core.DTO.Ratings.Requests.RatingUpdateRequest)">
            <summary>
            Updates an existing rating owned by the logged-in user.
            </summary>
            <param name="id">The ID of the rating to update.</param>
            <param name="request">The updated rating details.</param>
            <returns>The updated rating as a <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/> or 404 if not found.</returns>
            <response code="200">Successfully updated the rating.</response>
            <response code="404">Rating not found or not owned by user.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.DeleteRating(System.Guid)">
            <summary>
            Deletes a rating owned by the logged-in user.
            </summary>
            <param name="id">The ID of the rating to delete.</param>
            <returns>No content if successful, otherwise 404 if not found.</returns>
            <response code="204">Rating successfully deleted.</response>
            <response code="404">Rating not found or not owned by user.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.GetRatingsForProduct(System.Guid)">
            <summary>
            Retrieves all ratings for a specific product.
            </summary>
            <param name="productId">The ID of the product.</param>
            <returns>A list of ratings as <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/>.</returns>
            <response code="200">Successfully retrieved product ratings.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.GetProductRatingSummary(System.Guid)">
            <summary>
            Retrieves a summary of ratings for a specific product,
            including average score and total number of ratings.
            </summary>
            <param name="productId">The ID of the product.</param>
            <returns>A <see cref="T:EStoreX.Core.DTO.Ratings.Response.ProductRatingResponse"/> containing rating summary.</returns>
            <response code="200">Successfully retrieved product rating summary.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.GetMyRatingForProduct(System.Guid)">
            <summary>
            Retrieves the current logged-in user's rating for a specific product.
            </summary>
            <param name="productId">The unique identifier of the product.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> containing the user's rating,
            or a 404 Not Found response if the user hasn't rated the product yet.
            </returns>
            <response code="200">Successfully retrieved the user's rating.</response>
            <response code="404">No rating found for this product by the user.</response>
            <response code="401">If the user is not authenticated.</response>
        </member>
        <member name="T:E_StoreX.API.Middleware.ApiKeyMiddleware">
            <summary>
            Middleware to validate API key from incoming HTTP requests.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ApiKeyMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{EStoreX.Core.Domain.Options.SecuritySettings})">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Middleware.ApiKeyMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
            <param name="options">options setting</param>
        </member>
        <member name="M:E_StoreX.API.Middleware.ApiKeyMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,EStoreX.Core.ServiceContracts.Account.IApiClientService)">
            <summary>
            Invokes the middleware to check for a valid API key.
            </summary>
            <param name="context">The current HTTP context.</param>
            <param name="apiClientService">api client</param>
        </member>
        <member name="T:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions">
            <summary>
            Exception Handling Middleware Extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions.UseExceptionHandlingMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddleware">
            <summary>
            html rewrite middleware
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{EStoreX.Core.Domain.Options.HtmlRewriteOptions})">
            <summary>
            html rewrite middleware constructor
            </summary>
            <param name="next">call next middleware</param>
            <param name="options">html redirect paths</param>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            html rewrite middleware invoke method
            </summary>
            <param name="context">current context</param>
            <returns>call next</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions">
            <summary>
            html rewrite middleware extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions.UseHtmlRewriteMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            html rewrite middleware extension method
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:EStoreX.API.Filters.AccountValidationFilter">
            <summary>
            A custom action filter that handles model validation errors for account-related actions.
            Returns a uniform error response if the ModelState is invalid.
            </summary>
        </member>
        <member name="M:EStoreX.API.Filters.AccountValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Executes the action filter asynchronously.
            If the model state is invalid, it short-circuits the pipeline and returns a standardized error response.
            Otherwise, it allows the request to proceed to the action method.
            </summary>
            <param name="context">The context for the current action execution.</param>
            <param name="next">The delegate to execute the next action filter or action method.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
    </members>
</doc>
