<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E-StoreX.API</name>
    </assembly>
    <members>
        <member name="T:E_StoreX.API.Controllers.Admin.AdminControllerBase">
            <summary>
            Abstract base controller for admin-related operations.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.ApiClientsController">
            <summary>
            api clients controller  
            </summary>
            <remarks>This controller inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/> and is intended for use in
            administrative scenarios where order-related operations are required. It serves as a base for implementing
            actions related to order management.</remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.#ctor(EStoreX.Core.ServiceContracts.Account.IApiClientService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.ApiClientsController"/> class with the specified API client
            service.
            </summary>
            <remarks>â€” This constructor is typically used by dependency injection to provide the required
            service for API client management.</remarks>
            <param name="clientService">The service used to manage API client data and operations. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RegisterClient(EStoreX.Core.DTO.Account.Requests.RegisterApiClientRequest)">
            <summary>
            Registers a new API client and returns its API key.
            </summary>
            <param name="request">Client name info.</param>
            <returns>Client name and API key.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetClientByKey(System.String)">
            <summary>
            Retrieves client details by its API key.
            </summary>
            <param name="apiKey">The API key used to identify the client.</param>
            <returns>
            200 OK: Returns the client details if the API key is valid.  
            404 Not Found: If no client is associated with the provided API key.  
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetAllClients">
            <summary>
            Retrieves all registered API clients.
            </summary>
            <returns>A list of <see cref="T:Domain.Entities.Common.ApiClient"/> entities.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.ActiveClient(System.Guid)">
            <summary>
            Activates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client to activate.</param>
            <returns>200 OK if activated successfully; 404 if the client is not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.DeActivateClient(System.Guid)">
            <summary>
            Deactivates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client to deactivate.</param>
            <returns>200 OK if deactivated successfully; 404 if the client is not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.GetClient(System.Guid)">
            <summary>
            Retrieves a specific API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the API client.</param>
            <returns>200 OK with the <see cref="T:Domain.Entities.Common.ApiClient"/> data if found; 404 if not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RemoveClient(System.Guid)">
            <summary>
            Removes an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the client to remove.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the outcome of the operation.  
            Returns <c>200 OK</c> if the client was removed successfully,  
            or <c>404 Not Found</c> if the client does not exist.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.UpdateClient(System.Guid,EStoreX.Core.DTO.Common.UpdateClientRequest)">
            <summary>
            Updates an API client by its unique identifier.
            </summary>
            <param name="clientId">The unique identifier of the client.</param>
            <param name="request">The updated client data.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the outcome of the update operation.  
            Returns <c>200 OK</c> if updated successfully,  
            or <c>404 Not Found</c> if the client does not exist.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ApiClientsController.RotateApiKey(System.Guid)">
            <summary>
            Rotates the API key of a specific client.
            </summary>
            <param name="clientId">The ID of the client.</param>
            <returns>Newly generated API key.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.CategoriesController">
            <summary>
            Controller for managing product categories in the E-StoreX application.
            </summary>
            <remarks>This controller inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/> and is intended for use in
            administrative scenarios where order-related operations are required. It serves as a base for implementing
            actions related to order management.</remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.Categories.ICategoriesService)">
            <summary>
            Constructor for CategoriesController.
            </summary>
            <param name="categoriesService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.CreateCategory(EStoreX.Core.DTO.Categories.Requests.CategoryRequest)">
            <summary>
            Creates a new category in the database.
            </summary>
            <param name="categoryDTO">categoryDTO object</param>
            <returns>Category created</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.UpdateCategory(System.Guid,EStoreX.Core.DTO.Categories.Requests.UpdateCategoryDTO)">
            <summary>
            Updates an existing category in the database.
            </summary>
            <param name="Id">category Id</param>
            <param name="categoryDTO">the new value for category object</param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.CategoriesController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category with the specified Id from the database.
            </summary>
            <param name="Id">Category Id</param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.OrdersController">
            <summary>
            Provides functionality for managing and processing orders within the administrative context.
            </summary>
            <remarks>This controller inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/> and is intended for use in
            administrative scenarios where order-related operations are required. It serves as a base for implementing
            actions related to order management.</remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.#ctor(EStoreX.Core.ServiceContracts.Orders.IOrderService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Admin.OrdersController"/> class with the specified order service.
            </summary>
            <param name="orderService">The service used to manage order-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.OrdersController.GetOrders">
            <summary>
            Retrieves all orders from the system.
            </summary>
            <returns>All orders</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.ProductsController">
            <summary>
            products controller for admin operations in the E-StoreX application.
            </summary>
            <remarks>This controller inherits from <see cref="T:E_StoreX.API.Controllers.Admin.AdminControllerBase"/> and is intended for use in
            administrative scenarios where order-related operations are required. It serves as a base for implementing
            actions related to order management.</remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.#ctor(EStoreX.Core.ServiceContracts.Products.IProductsService)">
            <summary>
            Constructor for ProductsController.
            </summary>
            <param name="productsService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.CreateProduct(EStoreX.Core.DTO.Products.Requests.ProductAddRequest)">
            <summary>
            Create new product in database
            </summary>
            <param name="productRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.UpdateProduct(System.Guid,EStoreX.Core.DTO.Products.Requests.ProductUpdateRequest)">
            <summary>
            Updates an existing product in the database.
            </summary>
            <param name="id"></param>
            <param name="productUpdateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.ProductsController.DeleteProduct(System.Guid)">
            <summary>
            delete product from database
            </summary>
            <param name="id">product Id</param>
            <returns>ok / NotFound</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Admin.UserManagementController">
            <summary>
            user management controller for administrative operations
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.#ctor(EStoreX.Core.ServiceContracts.Account.IUserManagementService)">
            <summary>
            User management controller constructor
            </summary>
            <param name="userManagementService">Service responsible for management</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.GetAllUsers">
            <summary>
            Get all users (Admin or SuperAdmin).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.GetUserById(System.String)">
            <summary>
            Get a user by id (Admin or SuperAdmin).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.AddAdmin(EStoreX.Core.DTO.Account.Requests.CreateAdminDTO)">
            <summary>
            Create an Admin (SuperAdmin only).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeleteAdmin(System.String)">
            <summary>
            Delete an admin permanently (SuperAdmin only).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeleteUser(System.String)">
            <summary>
            Delete a user (rules depend on roles: SuperAdmin/Admin).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.DeactivateUser(System.String)">
            <summary>
            Deactivate a user (Admin or SuperAdmin).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.ActivateUser(System.String)">
            <summary>
            Activate a user (Admin or SuperAdmin).
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.AssignRole(EStoreX.Core.DTO.Account.Requests.UpdateUserRoleDTO)">
            <summary>
            Assign a specified role to a user. Accessible only by Super Admin.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Admin.UserManagementController.RemoveRole(EStoreX.Core.DTO.Account.Requests.UpdateUserRoleDTO)">
            <summary>
            Remove a specified role from a user. Accessible only by Super Admin.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.AccountController">
            <summary>
            Controller responsible for handling user authentication-related actions
            such as registration, login, email confirmation, and password reset for the E-StoreX API.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.#ctor(EStoreX.Core.ServiceContracts.Account.IAuthenticationService,AutoMapper.IMapper,Microsoft.AspNetCore.Identity.SignInManager{EStoreX.Core.Domain.IdentityEntities.ApplicationUser})">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.AccountController"/> class.
            </summary>
            <param name="authService">
            The authentication service that handles user registration, login, 
            email confirmation, and password reset logic.
            </param>
            <param name="mapper">
            mapper instance for mapping between DTOs and domain entities.
            </param>
            <param name="signInManager">
            sign-in manager for handling user sign-in operations,
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostRegister(EStoreX.Core.DTO.Account.Requests.RegisterDTO)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="registerDTO">
            An object containing user registration details like username, email, and password.
            </param>
            <returns>
            Returns <c>200 OK</c> if registration is successful, or <c>400/409</c> with details if it fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostLogin(EStoreX.Core.DTO.Account.Requests.LoginDTO)">
            <summary>
            Authenticates an existing user and generates a JWT token.
            </summary>
            <param name="loginDTO">
            The user's login credentials (email and password).
            </param>
            <returns>
            Returns a JWT token with <c>200 OK</c> on success or <c>401/404</c> with error details if authentication fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ConfirmEmail(EStoreX.Core.DTO.Account.Requests.ConfirmEmailDTO)">
            <summary>
            Confirms a user's email using the provided user ID and token.
            </summary>
            <param name="dto">
            Contains the user ID, email confirmation token, and an optional redirect URL.
            </param>
            <returns>
            Returns <c>200 OK</c> if the email confirmation is successful, or 
            <c>400/404</c> if the token is invalid or user is not found.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ForgotPassword(EStoreX.Core.DTO.Account.Requests.ForgotPasswordDTO)">
            <summary>
            Sends a password reset link to the user's email address.
            </summary>
            <param name="dto">
            Contains the email address of the user who requested a password reset.
            </param>
            <returns>
            Returns <c>200 OK</c> if the reset link was sent successfully, or <c>400/429</c> with error details.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.VerifyResetPassword(EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO)">
            <summary>
            Verifies the validity of a reset password token for a given user.
            </summary>
            <param name="dto">
            Contains the User ID and reset token to validate.
            </param>
            <returns>
            Returns <c>200 OK</c> if the token is valid or <c>400/404</c> if invalid/expired.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ResetPassword(EStoreX.Core.DTO.Account.Requests.ResetPasswordDTO)">
            <summary>
            Resets the user's password using a valid token.
            </summary>
            <param name="dto">Contains user ID, token, and new password details.</param>
            <returns>Returns a success or failure response based on token validity and password rules.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.RefreshToken(EStoreX.Core.DTO.Account.Responses.TokenModel)">
            <summary>
            Generates a new access token (and refresh token) using a valid refresh token.
            </summary>
            <param name="model">The current (expired) access token and refresh token.</param>
            <returns>Returns a new JWT token pair on success or an error response on failure.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.UpdateAddress(EStoreX.Core.DTO.Orders.Requests.ShippingAddressDTO)">
            <summary>
            Updates the authenticated user's address.
            </summary>
            <param name="addressDTO">
            The new <see cref="T:EStoreX.Core.DTO.Orders.Requests.ShippingAddressDTO"/> object containing the updated address details.
            </param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with a success message if the update succeeds,
            or <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> with an error message if it fails.
            </returns>
            <remarks>
            The method retrieves the user's email from the JWT claims and uses it to update the address.
            The user must be authenticated for this operation.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.GetAddress">
            <summary>
            Retrieves the shipping address of the currently authenticated user.
            </summary>
            <remarks>
            Requires the user to be authenticated. The user's email is extracted from the JWT claims,
            and used to fetch the associated shipping address from the authentication service.
            </remarks>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the shipping address on success (HTTP 200),
            or <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> with an error message if the address could not be retrieved (HTTP 400).
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.PostLogout">
            <summary>
            Logs out the currently authenticated user by clearing their refresh token 
            and signing them out.
            </summary>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the logout response status and message.
            </returns>
            <remarks>
            Requires the user to be authenticated.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.GetCurrentUser">
            <summary>
            Retrieves information about the currently authenticated user.
            </summary>
            <remarks>
            This endpoint reads the user ID from the authentication token claims
            and returns the corresponding user details.
            </remarks>
            <returns>
            200 OK with <see cref="T:EStoreX.Core.DTO.Account.Responses.ApplicationUserResponse"/> if the user exists;
            400 Bad Request if no user ID is found in claims;
            404 Not Found if the user does not exist.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.UpdateUserProfile(EStoreX.Core.DTO.Account.Requests.UpdateUserDTO)">
            <summary>
            Updates the authenticated user's profile information, including display name, 
            phone number, and optionally their password.
            </summary>
            <param name="dto">
            An <see cref="T:EStoreX.Core.DTO.Account.Requests.UpdateUserDTO"/> object containing the new profile data, 
            including current password and new password if the password is being changed.
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the update operation.
            On success, returns <see cref="!:ApiResponse"/> with status code 200.
            On failure, returns <see cref="!:ApiErrorResponse"/> with appropriate error details.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ExternalLogin(System.String)">
            <summary>
            Initiates the external login process by redirecting the user to the chosen authentication provider (e.g., Google, GitHub).
            </summary>
            <param name="provider">
            The external authentication provider to use (e.g., "Google", "GitHub").
            </param>
            <returns>
            A challenge result that redirects the user to the external provider's login page.
            </returns>
            <remarks>
            This method configures the external authentication properties, sets the redirect URL 
            to handle the provider's callback, and prompts the user to select an account.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.AccountController.ExternalLoginCallback(System.String)">
            <summary>
            Handles the callback from the external login provider after the authentication attempt.
            </summary>
            <param name="remoteError">
            Optional error message returned by the external provider during the authentication process.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the authentication response, 
            including status code and any relevant data or error messages.
            </returns>
            <remarks>
            This method calls <see cref="!:_authService.ExternalLoginCallbackAsync"/> to process the 
            external login result and return the final authentication response.
            </remarks>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.BasketsController">
            <summary>
            API controller for managing customer baskets.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.#ctor(EStoreX.Core.ServiceContracts.Basket.IBasketService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.BasketsController"/> class.
            </summary>
            <param name="basketService">basket service</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.GetBasket(System.String)">
            <summary>
            Retrieves a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>The customer basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.AddOrUpdateBasket(EStoreX.Core.DTO.Basket.CustomerBasketDTO)">
            <summary>
            Adds or updates a customer basket.
            </summary>
            <param name="basket">The basket to add or update.</param>
            <returns>The updated basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.DeleteBasket(System.String)">
            <summary>
            Deletes a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>Status of the deletion.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BasketsController.MergeBasket(System.String)">
            <summary>
            Merges the guest basket (created before login) with the authenticated user's basket.
            </summary>
            <param name="guestId">The basket ID generated for the guest session before login.</param>
            <returns>The merged customer basket associated with the logged-in user.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.BugController">
            <summary>
            Controller for handling bug-related operations.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetError">
            <summary>
            Returns a 500 Internal Server Error response.
            </summary>
            <returns>A 500 status code with a message indicating an internal server error.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetNotFound">
            <summary>
            Returns a 404 Not Found response.
            </summary>
            <returns>A 404 status code with a message indicating the resource was not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetBadRequest(System.Guid)">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.BugController.GetBadRequest">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.CategoriesController">
            <summary>
            Controller for managing product categories in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.Categories.ICategoriesService)">
            <summary>
            Constructor for CategoriesController.
            </summary>
            <param name="categoriesService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetCategories">
            <summary>
            Retrieves all categories from the database.
            </summary>
            <returns>return </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CategoriesController.GetCategoryById(System.Guid)">
            <summary>
            Retrieve category with specific Id 
            </summary>
            <param name="Id">Category Id</param>
            <returns>Category with Id or BadRequest</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.CustomControllerBase">
            <summary>
            Base controller for the E-StoreX API, providing common functionality for all controllers.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.CustomControllerBase.#ctor">
            <summary>
            Constructor for CustomControllerBase, initializing the unit of work.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.ErrorController">
            <summary>
            
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.FavouritesController">
            <summary>
            Controller responsible for managing user's favourite products.
            Provides endpoints to add, remove, and retrieve favourites for the authenticated user.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.#ctor(EStoreX.Core.ServiceContracts.Favourites.IFavouriteService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.FavouritesController"/> class.
            </summary>
            <param name="favouriteService">The service that handles favourite-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.AddToFavourite(System.Guid)">
            <summary>
            Adds a product to the authenticated user's list of favourites.
            </summary>
            <param name="productId">The unique identifier of the product to add.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the operation result.
            Returns <c>401 Unauthorized</c> if the user is not authenticated.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.RemoveFromFavourite(System.Guid)">
            <summary>
            Removes a product from the authenticated user's list of favourites.
            </summary>
            <param name="productId">The unique identifier of the product to remove.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the operation result.
            Returns <c>401 Unauthorized</c> if the user is not authenticated.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FavouritesController.GetUserFavourites">
            <summary>
            Retrieves all products in the authenticated user's favourites list.
            </summary>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the list of favourites.
            Returns <c>401 Unauthorized</c> if the user is not authenticated.
            </returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.FrontendProxyController">
            <summary>
            Controller that acts as a proxy between the frontend and backend for password reset functionality.
            </summary>
            <remarks>
            This controller is useful when the frontend cannot directly call the backend API due to security restrictions,
            such as the need to hide the API key.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.#ctor(System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.FrontendProxyController"/> class.
            </summary>
            <param name="httpClientFactory">The factory used to create <see cref="T:System.Net.Http.HttpClient"/> instances.</param>
            <param name="configuration">The configuration provider used to access API settings.</param>
            <param name="httpContextAccessor">
            Provides access to the current HTTP context, allowing retrieval of request-specific data
            such as the scheme, host, and path for constructing full URLs.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.ResetPasswordProxy(EStoreX.Core.DTO.Account.Requests.ResetPasswordDTO)">
            <summary>
            Acts as a proxy endpoint that forwards a password reset request from the frontend to the backend API.
            </summary>
            <param name="request">The password reset request body sent from the frontend.</param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that contains the response returned by the backend API.
            Possible status codes include:
            - 200 OK if the reset was successful,
            - 4xx for client-side errors (e.g. invalid input, rate limits),
            - 5xx for server errors or connectivity issues.
            </returns>
            <remarks>
            This method reads the backend API URL and API key from the configuration, builds the full URL using the
            current HTTP request context, and forwards the request to the backend with the necessary headers.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.FrontendProxyController.VerifyResetPassword(EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO)">
            <summary>
            Acts as a proxy endpoint that forwards a verify reset password request from the frontend to the backend API.
            </summary>
            <param name="request">
            A <see cref="T:EStoreX.Core.DTO.Account.Requests.VerifyResetPasswordDTO"/> that contains the user's ID and the reset token.
            These parameters are passed from the frontend via query string.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> that contains the response from the backend.
            Status codes returned:
            - 200 OK: if the token is valid,
            - 400 Bad Request: if the token is invalid or expired,
            - 500 Internal Server Error: if the HTTP context is unavailable or another error occurs.
            </returns>
            <remarks>
            This endpoint constructs the backend verification URL using the current request scheme and host, 
            appends the API key in the headers, and relays the GET request with query parameters.
            </remarks>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.OrdersController">
            <summary>
            Controller responsible for handling order-related operations.
            Requires the user to be authenticated.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.#ctor(EStoreX.Core.ServiceContracts.Orders.IOrderService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.OrdersController"/> class.
            </summary>
            <param name="orderService">The service that handles order-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.CreateOrder(EStoreX.Core.DTO.Orders.Requests.OrderAddRequest)">
            <summary>
            Creates a new order for the authenticated user.
            </summary>
            <param name="order">The order data to be created.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the created order details if successful;
            otherwise, returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> if the user email is not found.
            </returns>
            <response code="200">Returns the newly created order.</response>
            <response code="400">If the user email is not present in the JWT token.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetOrders">
            <summary>
            Retrieves all orders associated with the currently authenticated user.
            </summary>
            <returns>A list of <see cref="!:OrderResponse"/> objects representing the user's orders.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetOrdersById(System.Guid)">
            <summary>
            Retrieves a specific order by its ID for the currently authenticated user.
            </summary>
            <param name="Id">The unique identifier of the order.</param>
            <returns>An <see cref="!:OrderResponse"/> object representing the order, or NotFound if not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.OrdersController.GetDeliveryMethods">
            <summary>
            Retrieves all available delivery methods.
            </summary>
            <returns>A list of <see cref="!:DeliveryMethodResponse"/> objects representing delivery options.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.PaymentsController">
            <summary>
            Handles payment-related operations such as creating or updating Stripe payment intents.
            </summary>
            <remarks>
            This controller is secured with [Authorize], meaning all endpoints require authenticated users.
            Typically called before placing an order to prepare or update the payment.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.#ctor(EStoreX.Core.ServiceContracts.Common.IPaymentService,Microsoft.Extensions.Options.IOptions{EStoreX.Core.Domain.Options.StripeSettings},Microsoft.Extensions.Logging.ILogger{E_StoreX.API.Controllers.Public.PaymentsController})">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.Public.PaymentsController"/> class.
            Handles payment operations including creating payment intents and processing webhooks.
            </summary>
            <param name="paymentService">Service for handling payment-related business logic.</param>
            <param name="options">Stripe configuration options (e.g., signing secret).</param>
            <param name="logger">Logger instance for logging payment events and errors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if Stripe signing secret is not provided in configuration.</exception>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.CreateOrUpdatePaymentIntent(System.String,System.Guid)">
            <summary>
            Creates or updates a Stripe payment intent for the specified basket and delivery method.
            </summary>
            <param name="basketId">The ID of the customer's basket. Cannot be null or empty.</param>
            <param name="deliveryMethodId">The ID of the selected delivery method.</param>
            <returns>
            Returns the updated <see cref="T:Domain.Entities.Baskets.CustomerBasket"/> including the client secret for Stripe payment.
            Returns <c>BadRequest</c> if basketId is invalid.
            Returns <c>NotFound</c> if the basket does not exist.
            Returns <c>Ok</c> with the updated basket if successful.
            </returns>
            <remarks>
            This endpoint is called by the frontend before initiating payment through Stripe.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.PaymentsController.UpdateStatusWithStripe">
            <summary>
            Handles incoming Stripe webhook events to update the order status based on the payment result.
            </summary>
            <remarks>
            This endpoint is called by Stripe to notify about payment intent status changes such as success or failure.
            It processes the webhook payload, validates the Stripe signature, and updates the related order in the system.
            
            Expected events:
            <list type="bullet">
              <item>
                <term>payment_intent.succeeded</term>
                <description>Updates the order status to PaymentReceived.</description>
              </item>
              <item>
                <term>payment_intent.payment_failed</term>
                <description>Updates the order status to PaymentFailed.</description>
              </item>
            </list>
            </remarks>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/> (200) if the webhook is processed successfully.
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> (400) if there's an error validating or processing the event.
            </returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.ProductsController">
            <summary>
            Controller for managing products in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.#ctor(EStoreX.Core.ServiceContracts.Products.IProductsService)">
            <summary>
            Constructor for ProductsController.
            </summary>
            <param name="productsService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetAllProducts(EStoreX.Core.DTO.Products.Responses.ProductQueryDTO)">
            <summary>
            Retrieves all products from the database.
            </summary>
            <returns>products</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.ProductsController.GetProductById(System.Guid)">
            <summary>
            Retrieves a product by its ID.
            </summary>
            <param name="Id">Product Id</param>
            <returns>Product or NotFound</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.Public.RatingsController">
            <summary>
            Handles all operations related to product ratings,
            including creating, updating, deleting, and retrieving ratings and summaries.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.#ctor(EStoreX.Core.ServiceContracts.Ratings.IRatingService)">
            <summary>
            Initializes a new instance of <see cref="T:E_StoreX.API.Controllers.Public.RatingsController"/>.
            </summary>
            <param name="ratingService">The service responsible for rating operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.AddRating(EStoreX.Core.DTO.Ratings.Requests.RatingAddRequest)">
            <summary>
            Adds a new rating for a given product by the logged-in user.
            </summary>
            <param name="request">The rating details including score, comment, and product ID.</param>
            <returns>The created rating as a <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/>.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.UpdateRating(System.Guid,EStoreX.Core.DTO.Ratings.Requests.RatingUpdateRequest)">
            <summary>
            Updates an existing rating owned by the logged-in user.
            </summary>
            <param name="id">The ID of the rating to update.</param>
            <param name="request">The updated rating details.</param>
            <returns>The updated rating as a <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/> or 404 if not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.DeleteRating(System.Guid)">
            <summary>
            Deletes a rating owned by the logged-in user.
            </summary>
            <param name="id">The ID of the rating to delete.</param>
            <returns>No content if successful, otherwise 404 if not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.GetRatingsForProduct(System.Guid)">
            <summary>
            Retrieves all ratings for a specific product.
            </summary>
            <param name="productId">The ID of the product.</param>
            <returns>A list of ratings as <see cref="T:EStoreX.Core.DTO.Ratings.Response.RatingResponse"/>.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.Public.RatingsController.GetProductRatingSummary(System.Guid)">
            <summary>
            Retrieves a summary of ratings for a specific product,
            including average score and total number of ratings.
            </summary>
            <param name="productId">The ID of the product.</param>
            <returns>A <see cref="T:EStoreX.Core.DTO.Ratings.Response.ProductRatingResponse"/> containing rating summary.</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.ApiKeyMiddleware">
            <summary>
            Middleware to validate API key from incoming HTTP requests.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ApiKeyMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Middleware.ApiKeyMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
        </member>
        <member name="M:E_StoreX.API.Middleware.ApiKeyMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,EStoreX.Core.ServiceContracts.Account.IApiClientService)">
            <summary>
            Invokes the middleware to check for a valid API key.
            </summary>
            <param name="context">The current HTTP context.</param>
            <param name="apiClientService">api client</param>
        </member>
        <member name="T:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions">
            <summary>
            Exception Handling Middleware Extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions.UseExceptionHandlingMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddleware">
            <summary>
            html rewrite middleware
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            html rewrite middleware constructor
            </summary>
            <param name="next">call next middleware</param>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            html rewrite middleware invoke method
            </summary>
            <param name="context">current context</param>
            <returns>call next</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions">
            <summary>
            html rewrite middleware extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions.UseHtmlRewriteMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            html rewrite middleware extension method
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:EStoreX.API.Filters.AccountValidationFilter">
            <summary>
            A custom action filter that handles model validation errors for account-related actions.
            Returns a uniform error response if the ModelState is invalid.
            </summary>
        </member>
        <member name="M:EStoreX.API.Filters.AccountValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Executes the action filter asynchronously.
            If the model state is invalid, it short-circuits the pipeline and returns a standardized error response.
            Otherwise, it allows the request to proceed to the action method.
            </summary>
            <param name="context">The context for the current action execution.</param>
            <param name="next">The delegate to execute the next action filter or action method.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
    </members>
</doc>
