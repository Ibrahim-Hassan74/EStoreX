<?xml version="1.0"?>
<doc>
    <assembly>
        <name>E-StoreX.API</name>
    </assembly>
    <members>
        <member name="T:E_StoreX.API.Controllers.AccountController">
            <summary>
            Controller responsible for handling user authentication-related actions
            such as registration, login, email confirmation, and password reset for the E-StoreX API.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.#ctor(ServiceContracts.IAuthenticationService,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.AccountController"/> class.
            </summary>
            <param name="authService">
            The authentication service that handles user registration, login, 
            email confirmation, and password reset logic.
            </param>
            <param name="mapper">
            mapper instance for mapping between DTOs and domain entities.
            </param>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.PostRegister(EStoreX.Core.DTO.RegisterDTO)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="registerDTO">
            An object containing user registration details like username, email, and password.
            </param>
            <returns>
            Returns <c>200 OK</c> if registration is successful, or <c>400/409</c> with details if it fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.PostLogin(EStoreX.Core.DTO.LoginDTO)">
            <summary>
            Authenticates an existing user and generates a JWT token.
            </summary>
            <param name="loginDTO">
            The user's login credentials (email and password).
            </param>
            <returns>
            Returns a JWT token with <c>200 OK</c> on success or <c>401/404</c> with error details if authentication fails.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ConfirmEmail(EStoreX.Core.DTO.ConfirmEmailDTO)">
            <summary>
            Confirms a user's email using the provided user ID and token.
            </summary>
            <param name="dto">
            Contains the user ID, email confirmation token, and an optional redirect URL.
            </param>
            <returns>
            Returns <c>200 OK</c> if the email confirmation is successful, or 
            <c>400/404</c> if the token is invalid or user is not found.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ForgotPassword(EStoreX.Core.DTO.ForgotPasswordDTO)">
            <summary>
            Sends a password reset link to the user's email address.
            </summary>
            <param name="dto">
            Contains the email address of the user who requested a password reset.
            </param>
            <returns>
            Returns <c>200 OK</c> if the reset link was sent successfully, or <c>400/429</c> with error details.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.VerifyResetPassword(EStoreX.Core.DTO.VerifyResetPasswordDTO)">
            <summary>
            Verifies the validity of a reset password token for a given user.
            </summary>
            <param name="dto">
            Contains the User ID and reset token to validate.
            </param>
            <returns>
            Returns <c>200 OK</c> if the token is valid or <c>400/404</c> if invalid/expired.
            </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.ResetPassword(EStoreX.Core.DTO.ResetPasswordDTO)">
            <summary>
            Resets the user's password using a valid token.
            </summary>
            <param name="dto">Contains user ID, token, and new password details.</param>
            <returns>Returns a success or failure response based on token validity and password rules.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.RefreshToken(EStoreX.Core.DTO.TokenModel)">
            <summary>
            Generates a new access token (and refresh token) using a valid refresh token.
            </summary>
            <param name="model">The current (expired) access token and refresh token.</param>
            <returns>Returns a new JWT token pair on success or an error response on failure.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.UpdateAddress(EStoreX.Core.DTO.ShippingAddressDTO)">
            <summary>
            Updates the authenticated user's address.
            </summary>
            <param name="addressDTO">
            The new <see cref="T:EStoreX.Core.DTO.ShippingAddressDTO"/> object containing the updated address details.
            </param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with a success message if the update succeeds,
            or <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> with an error message if it fails.
            </returns>
            <remarks>
            The method retrieves the user's email from the JWT claims and uses it to update the address.
            The user must be authenticated for this operation.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.AccountController.GetAddress">
            <summary>
            Retrieves the shipping address of the currently authenticated user.
            </summary>
            <remarks>
            Requires the user to be authenticated. The user's email is extracted from the JWT claims,
            and used to fetch the associated shipping address from the authentication service.
            </remarks>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the shipping address on success (HTTP 200),
            or <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> with an error message if the address could not be retrieved (HTTP 400).
            </returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.BasketsController">
            <summary>
            API controller for managing customer baskets.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.#ctor(EStoreX.Core.ServiceContracts.IBasketService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.BasketsController"/> class.
            </summary>
            <param name="basketService">basket service</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.GetBasket(System.String)">
            <summary>
            Retrieves a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>The customer basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.AddOrUpdateBasket(EStoreX.Core.Domain.Entities.CustomerBasket)">
            <summary>
            Adds or updates a customer basket.
            </summary>
            <param name="basket">The basket to add or update.</param>
            <returns>The updated basket.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BasketsController.DeleteBasket(System.String)">
            <summary>
            Deletes a customer basket by ID.
            </summary>
            <param name="id">The customer ID.</param>
            <returns>Status of the deletion.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.BugController">
            <summary>
            Controller for handling bug-related operations.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetError">
            <summary>
            Returns a 500 Internal Server Error response.
            </summary>
            <returns>A 500 status code with a message indicating an internal server error.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetNotFound">
            <summary>
            Returns a 404 Not Found response.
            </summary>
            <returns>A 404 status code with a message indicating the resource was not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetBadRequest(System.Guid)">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.BugController.GetBadRequest">
             <summary>
             Returns a 400 Bad Request response.
             </summary>
             <returns>A 400 status code with a message indicating the resource was bad-request</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.CategoriesController">
            <summary>
            Controller for managing product categories in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.#ctor(EStoreX.Core.ServiceContracts.ICategoriesService)">
            <summary>
            Constructor for CategoriesController.
            </summary>
            <param name="categoriesService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.GetCategories">
            <summary>
            Retrieves all categories from the database.
            </summary>
            <returns>return </returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.GetCategoryById(System.Guid)">
            <summary>
            Retrieve category with specific Id 
            </summary>
            <param name="Id">Category Id</param>
            <returns>Category with Id or BadRequest</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.CreateCategory(EStoreX.Core.DTO.CategoryRequest)">
            <summary>
            Creates a new category in the database.
            </summary>
            <param name="categoryDTO">categoryDTO object</param>
            <returns>Category created</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.UpdateCategory(System.Guid,EStoreX.Core.DTO.UpdateCategoryDTO)">
            <summary>
            Updates an existing category in the database.
            </summary>
            <param name="Id">category Id</param>
            <param name="categoryDTO">the new value for category object</param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.CategoriesController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category with the specified Id from the database.
            </summary>
            <param name="Id">Category Id</param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.CustomControllerBase">
            <summary>
            Base controller for the E-StoreX API, providing common functionality for all controllers.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.CustomControllerBase.#ctor">
            <summary>
            Constructor for CustomControllerBase, initializing the unit of work.
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.ErrorController">
            <summary>
            
            </summary>
        </member>
        <member name="T:E_StoreX.API.Controllers.OrdersController">
            <summary>
            Controller responsible for handling order-related operations.
            Requires the user to be authenticated.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.OrdersController.#ctor(EStoreX.Core.ServiceContracts.IOrderService)">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.OrdersController"/> class.
            </summary>
            <param name="orderService">The service that handles order-related operations.</param>
        </member>
        <member name="M:E_StoreX.API.Controllers.OrdersController.CreateOrder(EStoreX.Core.DTO.OrderAddRequest)">
            <summary>
            Creates a new order for the authenticated user.
            </summary>
            <param name="order">The order data to be created.</param>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> with the created order details if successful;
            otherwise, returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> if the user email is not found.
            </returns>
            <response code="200">Returns the newly created order.</response>
            <response code="400">If the user email is not present in the JWT token.</response>
        </member>
        <member name="M:E_StoreX.API.Controllers.OrdersController.GetOrders">
            <summary>
            Retrieves all orders associated with the currently authenticated user.
            </summary>
            <returns>A list of <see cref="T:EStoreX.Core.DTO.OrderResponse"/> objects representing the user's orders.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.OrdersController.GetOrdersById(System.Guid)">
            <summary>
            Retrieves a specific order by its ID for the currently authenticated user.
            </summary>
            <param name="Id">The unique identifier of the order.</param>
            <returns>An <see cref="T:EStoreX.Core.DTO.OrderResponse"/> object representing the order, or NotFound if not found.</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.OrdersController.GetDeliveryMethods">
            <summary>
            Retrieves all available delivery methods.
            </summary>
            <returns>A list of <see cref="T:EStoreX.Core.DTO.DeliveryMethodResponse"/> objects representing delivery options.</returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.PaymentsController">
            <summary>
            Handles payment-related operations such as creating or updating Stripe payment intents.
            </summary>
            <remarks>
            This controller is secured with [Authorize], meaning all endpoints require authenticated users.
            Typically called before placing an order to prepare or update the payment.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.PaymentsController.#ctor(EStoreX.Core.ServiceContracts.IPaymentService,Microsoft.Extensions.Options.IOptions{EStoreX.Core.Domain.Options.StripeSettings},Microsoft.Extensions.Logging.ILogger{E_StoreX.API.Controllers.PaymentsController})">
            <summary>
            Initializes a new instance of the <see cref="T:E_StoreX.API.Controllers.PaymentsController"/> class.
            Handles payment operations including creating payment intents and processing webhooks.
            </summary>
            <param name="paymentService">Service for handling payment-related business logic.</param>
            <param name="options">Stripe configuration options (e.g., signing secret).</param>
            <param name="logger">Logger instance for logging payment events and errors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if Stripe signing secret is not provided in configuration.</exception>
        </member>
        <member name="M:E_StoreX.API.Controllers.PaymentsController.CreateOrUpdatePaymentIntent(System.String,System.Nullable{System.Guid})">
            <summary>
            Creates or updates a Stripe payment intent for the specified basket and delivery method.
            </summary>
            <param name="basketId">The ID of the customer's basket. Cannot be null or empty.</param>
            <param name="deliveryMethodId">The ID of the selected delivery method. Optional.</param>
            <returns>
            Returns the updated <see cref="T:EStoreX.Core.Domain.Entities.CustomerBasket"/> including the client secret for Stripe payment.
            Returns <c>BadRequest</c> if basketId is invalid.
            Returns <c>NotFound</c> if the basket does not exist.
            Returns <c>Ok</c> with the updated basket if successful.
            </returns>
            <remarks>
            This endpoint is called by the frontend before initiating payment through Stripe.
            </remarks>
        </member>
        <member name="M:E_StoreX.API.Controllers.PaymentsController.UpdateStatusWithStripe">
            <summary>
            Handles incoming Stripe webhook events to update the order status based on the payment result.
            </summary>
            <remarks>
            This endpoint is called by Stripe to notify about payment intent status changes such as success or failure.
            It processes the webhook payload, validates the Stripe signature, and updates the related order in the system.
            
            Expected events:
            <list type="bullet">
              <item>
                <term>payment_intent.succeeded</term>
                <description>Updates the order status to PaymentReceived.</description>
              </item>
              <item>
                <term>payment_intent.payment_failed</term>
                <description>Updates the order status to PaymentFailed.</description>
              </item>
            </list>
            </remarks>
            <returns>
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/> (200) if the webhook is processed successfully.
            Returns <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestResult"/> (400) if there's an error validating or processing the event.
            </returns>
        </member>
        <member name="T:E_StoreX.API.Controllers.ProductsController">
            <summary>
            Controller for managing products in the E-StoreX application.
            </summary>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.#ctor(EStoreX.Core.ServiceContracts.IProductsService)">
            <summary>
            Constructor for ProductsController.
            </summary>
            <param name="productsService"></param>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.GetAllProducts(EStoreX.Core.DTO.ProductQueryDTO)">
            <summary>
            Retrieves all products from the database.
            </summary>
            <returns>products</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.GetProductById(System.Guid)">
            <summary>
            Retrieves a product by its ID.
            </summary>
            <param name="Id">Product Id</param>
            <returns>Product or NotFound</returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.CreateProduct(EStoreX.Core.DTO.ProductAddRequest)">
            <summary>
            Create new product in database
            </summary>
            <param name="productRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.UpdateProduct(System.Guid,EStoreX.Core.DTO.ProductUpdateRequest)">
            <summary>
            Updates an existing product in the database.
            </summary>
            <param name="id"></param>
            <param name="productUpdateRequest"></param>
            <returns></returns>
        </member>
        <member name="M:E_StoreX.API.Controllers.ProductsController.DeleteProduct(System.Guid)">
            <summary>
            delete product from database
            </summary>
            <param name="id">product Id</param>
            <returns>ok / NotFound</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions">
            <summary>
            Exception Handling Middleware Extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.ExceptionHandlingMiddlewareExtensions.UseExceptionHandlingMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddleware">
            <summary>
            html rewrite middleware
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            html rewrite middleware constructor
            </summary>
            <param name="next">call next middleware</param>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            html rewrite middleware invoke method
            </summary>
            <param name="context">current context</param>
            <returns>call next</returns>
        </member>
        <member name="T:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions">
            <summary>
            html rewrite middleware extensions
            </summary>
        </member>
        <member name="M:E_StoreX.API.Middleware.HtmlRewriteMiddlewareExtensions.UseHtmlRewriteMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            html rewrite middleware extension method
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:EStoreX.API.Filters.AccountValidationFilter">
            <summary>
            A custom action filter that handles model validation errors for account-related actions.
            Returns a uniform error response if the ModelState is invalid.
            </summary>
        </member>
        <member name="M:EStoreX.API.Filters.AccountValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Executes the action filter asynchronously.
            If the model state is invalid, it short-circuits the pipeline and returns a standardized error response.
            Otherwise, it allows the request to proceed to the action method.
            </summary>
            <param name="context">The context for the current action execution.</param>
            <param name="next">The delegate to execute the next action filter or action method.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
    </members>
</doc>
